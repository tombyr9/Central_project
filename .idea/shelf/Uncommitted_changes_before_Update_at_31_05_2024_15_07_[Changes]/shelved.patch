Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\nimport random\nimport sys\nimport os\nfrom function import *\n\n\nm = 1000000\nbag = []\nshop = {\"parc_dattraction\" : 1000000, \"aire_de_jeu\" : 10000, \"statue\" : 1500, \"magasin_de_fleurs\": 200000, \"caserne_douvriers\": 3000, \"petite_centrale\" : 8000}\n\nopen\npygame.init() #Initialisation de la séance d'affichage\n\n# Définition de la couleur blanche\nblanc = (255, 255, 255) #Initialisation des couleurs blanches et noires\nnoir = (0, 0, 0)\n#Tout ce qui a en dessous sont des initialisation du jeu de Tom\n#################################################################################################\n#Définition des deux classes utiles pour le jeu vidéo de Tom mini_game_thief\nclass character:\n    def __init__(self):\n        self.speed = 2\n        self.life = 3\n        self.y = 230\n        self.x = 300\n        self.taille = (25,25)\n        self.position = (self.x, self.y)\n\nclass text:\n    def __init__(self):\n        self.speed = 2\n        self.life = 3\n        self.y = 270\n        self.x = 220\n        self.taille = (25,25)\n        self.position = (self.x, self.y)\n#Permet d'utiliser les classes et ses composantes du mini jeu de Tom mini_game_thief\nthief = character()\ntext = text()\n#Génère les images utiles au jeu vidéo de Tom, mini_game_thief\nthief_image_0 = pygame.image.load(\"design/character_0.png\")\nthief_image_1 = pygame.image.load(\"design/character_1.png\")\n#Une liste qui sert à l'animation du personnage du jeu de Tom, mini_game_thied\nthief_frames = [thief_image_0, thief_image_1]\n#Un index qui sert à l'animation du personnage du jeu de Tom, mini_game_thied\nindex = 0\n#Une liste de direction qui sert à l'animation du personnage du jeu de Tom, mini_game_thief\ndirection = [\"up\", \"down\", \"left\", \"right\"]\n#Une police d'écriture de direction qui sert au texte du jeu de Tom, mini_game_thief\nfont = pygame.font.Font(None, 36)  # Utilise la police par défaut avec une taille de 36 points\nfont2 = pygame.font.Font(None, 66)\n#Plusieurs fonctions qui servent au jeu de Tom, mini_game_thief\ndef thief_animation(thief_frames, thief , index):\n    current_frame = pygame.transform.scale(thief_frames[int(index)], thief.taille)\n    return current_frame\n\ndef thief_walk(current_frame, thief):\n    screen.blit(current_frame, thief.position)\n\n#Faire une foncton qui fait avancer le bonhomme dans une direction aléatoire\ndef change_position(thief):\n    if choice == \"up\" and 0<thief.y<455 and 0<thief.x<640:\n        thief.y += 1\n    elif choice == \"down\" and 0<thief.y<455 and 0<thief.x<640:\n        thief.y -= 1\n    elif choice == \"left\" and 0<thief.x<640 and 0<thief.y<455:\n        thief.x -= 1\n    elif choice == \"right\" and 0<thief.x<640 and 0<thief.y<455:\n        thief.x += 1\n    print(choice)\n\nplay_button = pygame.image.load(\"design/play_button.png\") #On initialise une variable avec l'image du bouton.\nplay_button_crop = pygame.transform.scale(play_button, (150,75)) #On rogne la taille de cette image du bouton.\n\n# Création d'une surface de texte\ntexte_before_game_1 = font.render(\"Le voleur est sur le point de s'échapper !\", True, noir)\ntexte_before_game_2 = font.render(\"Clique dessus avant qu'il ne s'enfuit.\", True, noir)\ntexte_before_game_3 = font.render(\"Prêt ?\", True, noir)\ntexte_restart = font.render(\"On recommence ?\", True, noir)\ntexte_win = font2.render(\"Bravo ! Tu l'as attrapé !\", True, blanc)\ntexte_win_rect = texte_win.get_rect()\ntexte_win_rect = texte_win_rect.move((85,230))\ntext_discover_map = font.render(\"Clique sur la carte pour l'actualiser.\", True, blanc)\ntexte_thief_exit = font.render(\"Il s'est echappé !\", True, noir)\n# Faire apparaître du texte\ntouch = False\n\nstart = False\nbefore_start = True\nafter_start = False\n##################################################################\n#Tout ce qui a au dessus sont des initialisation du jeu de Tom\ncrop = (640,455)\nscreen = pygame.display.set_mode((640, 455)) #L'écran affiché est de la taille 640 x 455\npygame.display.set_caption(\"CenTown\") #Le titre de la fenêtre est \"CenTown\"\n\n#Modifiable :\ntitle = pygame.image.load(\"design/pixilart-drawing.png\") #L'image jpg du logo est mis dans un format spécial dans la variable pygame. C'est le format \"surface\", nécessaire pour que pygame l'utilise.\nimage_rect = title.get_rect() #On met les coordonnées du titre dans une variable qu'on modifiera\n\nbackground_1 = pygame.image.load(\"design/frame-1.gif\") #On initialise trois variables background différentes qui vont être les frames de notre animation du menu.\nbackground_2 = pygame.image.load(\"design/frame-2.gif\")\nbackground_3 = pygame.image.load(\"design/frame-3.gif\")\nbackground_index = 0 #On initialise un compteur qui servira plus tard mais il est pas nécessaire.\nbackground_gif = [background_1, background_2, background_3]\nfor i in range(2):\n    background_gif[i]= pygame.transform.scale(background_gif[i], crop)\n\ncity_map = pygame.image.load(\"design/city_map_grey.png\") #On initialise une variable avec l'image de la ville.\ncity_map_crop = pygame.transform.scale(city_map, crop) #On rogne cette image dde la ville aux dimensions 640, 455\n\nplay_button = pygame.image.load(\"design/play_button.png\") #On initialise une variable avec l'image du bouton.\nplay_button_crop = pygame.transform.scale(play_button, (150,75)) #On rogne la taille de cette image du bouton.\nplay_button_crop_rect = play_button_crop.get_rect() #On met la taille de la surface de ce bouton rogné, dans une variable\nplay_button_crop_rect = play_button_crop_rect.move((230,300)) #On déplace la surface du bouton au centre bas de l'écran\n\nshop_image = pygame.image.load(\"design/shop_image.png\")\nshop_image_crop = pygame.transform.scale(shop_image, (200,220))\nshop_image_crop_rect = shop_image_crop.get_rect()\nshop_image_crop_rect = shop_image_crop_rect.move((460,230))\n\nshop_button = pygame.image.load(\"design/shop_button.png\")\nshop_button_crop = pygame.transform.scale(shop_button, (100, 40))\nshop_button_crop_rect = shop_button_crop.get_rect()\nshop_button_crop_rect = shop_button_crop_rect.move((510,410))\n\nwall_indoor_shop = pygame.image.load(\"design/wall_shop.jpg\")\nwall_indoor_shop_crop = pygame.transform.scale(wall_indoor_shop,(640, 455))\n\nnuclear_central = pygame.image.load(\"design/nuclear_central.png\")\nnuclear_central_crop = pygame.transform.scale(nuclear_central, (230,150))\n\nnuclear_central_button = pygame.image.load(\"design/Central_button.png\")\nnuclear_central_button_crop = pygame.transform.scale(nuclear_central_button, (100,75))\n\nreturn_button = pygame.image.load(\"design/return_button.png\")\nreturn_button_crop = pygame.transform.scale(return_button, (80, 80))\nreturn_button_crop_rect = return_button_crop.get_rect()\nreturn_button_crop_rect = return_button_crop_rect.move((20,370))\n\nchild = pygame.image.load(\"design/child.png\")\nchild_crop = pygame.transform.scale(child, (60,75))\nchild_crop_rect = child_crop.get_rect()\nchild_crop_rect = child_crop_rect.move((20,40))\n\nlibrary = pygame.image.load(\"design/library.jpg\")\nlibrary_crop = pygame.transform.scale(library, (670,455))\nlibrary_crop_rect = library_crop.get_rect()\nlibrary_crop_rect = library_crop_rect.move((0,0))\n\nchapitre1 = pygame.image.load(\"design/chapitre1.png\")\nchapitre1_crop = pygame.transform.scale(chapitre1, (180,105))\nchapitre1_crop_rect = chapitre1_crop.get_rect()\nchapitre1_crop_rect = chapitre1_crop_rect.move((240, 20))\n\nchapitre2grey = pygame.image.load(\"design/chapitre2-grey.png\")\nchapitre2grey_crop = pygame.transform.scale(chapitre2grey, (180,105))\nchapitre2grey_crop_rect = chapitre2grey_crop.get_rect()\nchapitre2grey_crop_rect = chapitre2grey_crop_rect.move((240,100))\n\nchapitre3grey = pygame.image.load(\"design/chapitre3-grey.png\")\nchapitre3grey_crop = pygame.transform.scale(chapitre3grey, (180,105))\nchapitre3grey_crop_rect = chapitre3grey_crop.get_rect()\nchapitre3grey_crop_rect = chapitre3grey_crop_rect.move((240, 180))\n\nchapitre4grey = pygame.image.load(\"design/chapitre4-grey.png\")\nchapitre4grey_crop = pygame.transform.scale(chapitre4grey, (180,105))\nchapitre4grey_crop_rect = chapitre4grey_crop.get_rect()\nchapitre4grey_crop_rect = chapitre4grey_crop_rect.move((240,260))\n\nchapitre5grey = pygame.image.load(\"design/chapitre5-grey.png\")\nchapitre5grey_crop = pygame.transform.scale(chapitre5grey, (180,105))\nchapitre5grey_crop_rect = chapitre5grey_crop.get_rect()\nchapitre5grey_crop_rect = chapitre5grey_crop_rect.move((240,340))\n\nvictoire = 0\ncpt = 0\nprint_title = True #On initialise une booléenne. Lorsqu'elle sera fausse, on cessera d'afficher le titre.\nprint_background = True #Même chose pour le fond d'écran.\nprint_play_button = True #Même chose pour le bouton play\nprint_city_map_crop = False #Mêeme chose pour la map de la ville\nprint_shop = False\nprint_indoor_shop = False\nprint_nuclear_central_shop = False\nprint_nuclear_central_logo = False\nprint_return_button = False\nprint_child = False\nmini_game_thief = False\nprint_library = False\nprint_chapitre1 = False\nprint_chapitre2grey = False\nprint_chapitre3grey = False\nprint_chapitre4grey = False\nprint_chapitre5grey = False\n\n\npolice = pygame.font.SysFont(None, 48)\n\n\nrun = True\nwhile run: #Tant que le programme est en cours\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT: #Tant que la croix n'a pas été cliqué, le programme continue\n                run = False\n        #Instructions  qui s'éxecute après avoir touché à bouton\n        if event.type == pygame.KEYDOWN: #Si la flèche du bas est saisie\n            if event.key == pygame.K_DOWN and image_rect.y < 170:\n                image_rect.y += 2 #L'ordonnée de l'image est modifiée, elle ne peut pas sortir de l'image grâce à la condition du dessus.\n            if event.key == pygame.K_UP and image_rect.y > -90: #Si la flèche du haut est saisia\n                image_rect.y -= 2 #Même chose que plus haut\n\n        #Instruction d'appuyer sur un boutton\n        if event.type == pygame.MOUSEBUTTONDOWN:\n\n            if play_button_crop_rect.collidepoint(event.pos)and (mini_game_thief==False):#Lorsqu'on appuie sur le bouton entrée\n                hub = open_town() #J'associe à une variable, les 5 qui sont retournées par la fonction \"open town()\", qui affiche uniquement les images qui sont nécessaire au menu de la ville : donc les images du shop, du fond d'écran et de l'enfant.\n                print_play_button,print_title,print_city_map_crop,print_shop,print_child = hub #Je mets à jours les 5 variables, en leur donnant leur nouvelle valeur \"true\" ou \"false\" qui sont comprise dans \"hub\"\n\n            if (shop_button_crop_rect.collidepoint(event.pos) and print_city_map_crop ==True) or (shop_image_crop_rect.collidepoint(event.pos) and print_city_map_crop==True) and (mini_game_thief==False): #Lorsqu'on appuie sur le bouton shop\n                hub = close_town()\n                print_city_map_crop, print_shop, print_child = hub\n                shop = open_shop()#J'associe à une variable, les 5 qui sont retournées par la fonction \"open town()\", qui affiche uniquement les images qui sont nécessaire à la boutique\n                print_indoor_shop, print_nuclear_central_shop, print_nuclear_central_logo, print_return_button = shop#Je mets à jours les 5 variables, en leur donnant leur nouvelle valeur \"true\" ou \"false\" qui sont comprise dans \"shop\".\n\n            if return_button_crop_rect.collidepoint(event.pos) and (print_indoor_shop == True) and (mini_game_thief==False): #Si je suis dans le shop et que je clique sur le bouton return alors je reviens à l'affichage de la ville.\n                hub = close_shop()\n                print_indoor_shop, print_nuclear_central_shop, print_nuclear_central_logo, print_return_button = hub\n                hub = open_town()\n                print_play_button,print_title,print_city_map_crop,print_shop,print_child = hub\n\n            if child_crop_rect.collidepoint(event.pos) and (print_city_map_crop == True):\n                print_library = True\n                print_return_button = True\n                print_chapitre1 = True\n                print_chapitre2grey = True\n                print_chapitre3grey = True\n                print_chapitre4grey = True\n                print_chapitre5grey = True\n\n            if chapitre1_crop_rect.collidepoint(event.pos) and (print_library == True):\n                print_library = False\n                print_chapitre1= False\n                mini_game_thief = True\n                print_return_button = False\n                print_chapitre2grey = False\n                print_chapitre3grey = False\n                print_chapitre4grey = False\n                print_chapitre5grey = False\n\n            if return_button_crop_rect.collidepoint(event.pos) and (print_library == True) and (mini_game_thief==False): #Si je suis dans la librairie et que je clique sur le bouton return alors je reviens à l'affichage de la ville.\n                print_library = False\n                print_chapitre1 = False\n                print_return_button = False\n                print_chapitre2grey = False\n                print_chapitre3grey = False\n                print_chapitre4grey = False\n                print_chapitre5grey = False\n\n\n\n\n\n        #Instructions pour pour l'affichage d'une image\n        if print_background == True: #tant qu'on met la variable à Vrai, on affiche le fond d'écran\n            if background_index >2: #Une suite d'instructions qui font en sorte que les éléments du décor s'affichent avec une certaine latence.\n                background_index = 0\n            if background_index <=2:\n                screen.blit(background_gif[int(background_index)],(0,0))\n                background_index = background_index+0.015 #Plus la valeur additionnée sera basse, plus la transition sera lente.\n\n        if print_city_map_crop == True:\n            screen.blit(city_map_crop,(0,0))\n        if print_shop == True:\n            screen.blit(shop_image_crop, (460, 230))\n            screen.blit(shop_button_crop, (510,410))\n        if print_title == True: #Tant qu'on met la variable à Vrai, on affiche le titre\n            screen.blit(title,(-20, image_rect.y))\n        if print_play_button == True:\n            screen.blit(play_button_crop,(230,300))\n        if print_indoor_shop == True    :\n            screen.blit(wall_indoor_shop_crop,(0,0))\n        if print_nuclear_central_shop == True:\n            screen.blit(nuclear_central_crop,(0,70))\n        if print_nuclear_central_logo == True:\n            screen.blit(nuclear_central_button_crop,(65,190))\n        if print_child == True:\n            screen.blit(child_crop,(20,40))\n        if print_library==True:\n            screen.blit(library_crop,(0,0))\n        if print_chapitre1 == True:\n            screen.blit(chapitre1_crop, (240, 20))\n        if print_chapitre2grey == True:\n            screen.blit(chapitre2grey_crop, (240, 100))\n        if print_chapitre3grey == True:\n            screen.blit(chapitre3grey_crop, (240, 180))\n        if print_chapitre4grey == True:\n            screen.blit(chapitre4grey_crop, (240, 260))\n        if print_chapitre5grey == True:\n            screen.blit(chapitre5grey_crop, (240, 340))\n        if print_return_button == True:\n            screen.blit(return_button_crop, (20, 350))\n        if victoire == 1:\n            if print_win_text == True:\n                screen.blit(texte_win, (45,180))\n                screen.blit(text_discover_map,(85,230))\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if texte_win_rect.collidepoint(event.pos):\n                    city_map = pygame.image.load(\"design/city_map_grey1.png\")  # On initialise une variable avec l'image de la ville.\n                    city_map_crop = pygame.transform.scale(city_map, crop)\n                    print_win_text = False\n        pygame.display.update() #Mise à jour\n        # continue du programme\n        print(mini_game_thief)\n        if mini_game_thief == True:\n            print_child = False\n            print_shop = False\n            print_background = False\n            print_city_map_crop = False\n            screen.fill(blanc)\n            # L'animation du bonhomme\n            index += 0.00001  # Incrémentez l'index\n            index = index + 0.01\n            if (index >= 2):\n                index = 0\n            if before_start == True:\n                touch = False\n                screen.blit(texte_before_game_1, (100, 90))\n                screen.blit(texte_before_game_2, (110, 150))\n                screen.blit(texte_before_game_3, (200, 360))\n                screen.blit(play_button_crop, (300, 330))\n                play_button_crop_rect = play_button_crop.get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\n                play_button_crop_rect = play_button_crop_rect.move((300, 330))\n                if event.type == pygame.MOUSEBUTTONDOWN:\n                    if play_button_crop_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\n                        before_start = False\n                        start = True\n                thief.x, thief.y = 300, 230\n                screen.blit(thief_animation(thief_frames, thief, index), (thief.x, thief.y))\n\n            if start == True:\n                # Un choix aléatoire est fait\n                choice = random.choice(direction)\n\n                if (thief.y <= 0) or (thief.y >= 455) or (640 <= thief.x) or (thief.x <= 0):\n                    touch = True\n                if touch == True:\n                    screen.blit(texte_thief_exit, text.position)\n                    screen.blit(texte_restart, (215, 300))\n                    screen.blit(play_button_crop, (235, 340))\n                    play_button_crop_rect = play_button_crop.get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\n                    play_button_crop_rect = play_button_crop_rect.move((225, 340))\n                    if event.type == pygame.MOUSEBUTTONDOWN and touch == True:\n                        if play_button_crop_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\n                            before_start = True\n                            start = False\n                # Lorsque le choix est fait thief.x et thief.y sont modifiés\n                change_position(thief)\n                # On met la surface du voleur dans une variable rect (obligatoire pour la collision future avec le curseur)\n                current_frame_rect = thief_animation(thief_frames, thief,index).get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\n                # On veut que la surface se déplace aux mêmes positions que le voleur\n                current_frame_rect = current_frame_rect.move(thief.x, thief.y)\n                if event.type == pygame.MOUSEBUTTONDOWN and touch == False:\n                    if current_frame_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\n                        before_start = False\n                        start = False\n                        after_start = True\n                # Actualise l'affichage du voleur avec les nouvelles coordonnées et sa bonne frame d'animation\n                screen.blit(thief_animation(thief_frames, thief, index), (thief.x, thief.y))\n            if after_start == True: #Cette condition provoque l'arrêt de jeu et rammène à l'affichage de la ville. Comme after start reste True pour toujours, alors l'enfant ne pourra plus jamais refaire ce niveau.\n                cpt +=1\n                mini_game_thief = False\n                if cpt == 1:\n                    print_win_text = True\n                victoire = 1\n                hub = open_town()  # J'associe à une variable, les 5 qui sont retournées par la fonction \"open town()\", qui affiche uniquement les images qui sont nécessaire au menu de la ville : donc les images du shop, du fond d'écran et de l'enfant.\n                print_play_button, print_title, print_city_map_crop, print_shop, print_child = hub\n\n\n            # Rafraîchir l'affichage\n\n\n# Remplir l'écran avec la couleur blanche\n\n# Boucle principale du jeu\n\n\n\npygame.quit()\nquit()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision c8301dc198ae8cfb6c38c308b3b25a46f70ff517)
+++ b/main.py	(date 1717142059599)
@@ -3,7 +3,7 @@
 import sys
 import os
 from function import *
-
+from quizz import *
 
 m = 1000000
 bag = []
@@ -16,6 +16,7 @@
 blanc = (255, 255, 255) #Initialisation des couleurs blanches et noires
 noir = (0, 0, 0)
 #Tout ce qui a en dessous sont des initialisation du jeu de Tom
+
 #################################################################################################
 #Définition des deux classes utiles pour le jeu vidéo de Tom mini_game_thief
 class character:
@@ -89,8 +90,10 @@
 start = False
 before_start = True
 after_start = False
+
 ##################################################################
 #Tout ce qui a au dessus sont des initialisation du jeu de Tom
+
 crop = (640,455)
 screen = pygame.display.set_mode((640, 455)) #L'écran affiché est de la taille 640 x 455
 pygame.display.set_caption("CenTown") #Le titre de la fenêtre est "CenTown"
@@ -187,13 +190,15 @@
 print_return_button = False
 print_child = False
 mini_game_thief = False
+mini_game_quizz =False #lilia
 print_library = False
 print_chapitre1 = False
 print_chapitre2grey = False
 print_chapitre3grey = False
 print_chapitre4grey = False
 print_chapitre5grey = False
-
+current_question = 0
+score = 0
 
 police = pygame.font.SysFont(None, 48)
 
@@ -247,6 +252,17 @@
                 print_chapitre3grey = False
                 print_chapitre4grey = False
                 print_chapitre5grey = False
+
+            if chapitre3grey_crop_rect.collidepoint(event.pos) and (print_library==True): #lilia
+                print_library = False
+                print_chapitre1 = False
+                mini_game_thief = False
+                print_return_button = False
+                print_chapitre2grey = False
+                print_chapitre3grey = False
+                print_chapitre4grey = False
+                print_chapitre5grey = False
+                mini_game_quizz= True
 
             if return_button_crop_rect.collidepoint(event.pos) and (print_library == True) and (mini_game_thief==False): #Si je suis dans la librairie et que je clique sur le bouton return alors je reviens à l'affichage de la ville.
                 print_library = False
@@ -376,6 +392,61 @@
                 hub = open_town()  # J'associe à une variable, les 5 qui sont retournées par la fonction "open town()", qui affiche uniquement les images qui sont nécessaire au menu de la ville : donc les images du shop, du fond d'écran et de l'enfant.
                 print_play_button, print_title, print_city_map_crop, print_shop, print_child = hub
 
+        print(mini_game_quizz)
+
+        if mini_game_quizz == True:
+            print_child = False
+            print_shop = False
+            print_background = False
+            print_city_map_crop = False
+
+
+
+            show_start_screen()
+            start_button = pygame.Rect(WIDTH // 2 - 50, HEIGHT // 2 + 50, 100, 50)
+
+            while True:
+                for event in pygame.event.get():
+                    if event.type == pygame.QUIT:
+                        pygame.quit()
+                        sys.exit()
+                    elif event.type == pygame.MOUSEBUTTONDOWN:
+                        mouse_pos = pygame.mouse.get_pos()
+                        if start_button.collidepoint(mouse_pos):
+                            while current_question < len(questions):
+                                buttons = show_question(current_question)
+                                pygame.display.flip()
+                                waiting = True
+                                while waiting:
+                                    for event in pygame.event.get():
+                                        if event.type == pygame.QUIT:
+                                            pygame.quit()
+                                            sys.exit()
+                                        elif event.type == pygame.MOUSEBUTTONDOWN:
+                                            mouse_pos = pygame.mouse.get_pos()
+                                            for i, button in enumerate(buttons):
+                                                if button.collidepoint(mouse_pos):
+                                                    waiting = False
+                                                    if i == correct_choices[current_question]:
+                                                        score += 1
+                                                    current_question += 1
+                                                    break
+                            screen.blit(background, (0, 0))
+                            draw_text("Votre score est : " + str(score) + "/" + str(len(questions)), font, BLACK,
+                                        screen,
+                                        WIDTH // 2, HEIGHT // 2)
+                            pygame.display.flip()
+                            pygame.time.wait(5000)
+                            pygame.quit()
+                            sys.exit()
+
+                pygame.draw.rect(screen, BLACK, start_button)
+                draw_text("Start", font, WHITE, screen, start_button.centerx, start_button.centery)
+
+                pygame.display.flip()
+
+
+
 
             # Rafraîchir l'affichage
 
@@ -388,3 +459,5 @@
 
 pygame.quit()
 quit()
+
+
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11_[Changes]/shelved.patch	(revision c8301dc198ae8cfb6c38c308b3b25a46f70ff517)
+++ /dev/null	(revision c8301dc198ae8cfb6c38c308b3b25a46f70ff517)
@@ -1,207 +0,0 @@
-Index: main.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import pygame\r\nimport random\r\nimport sys\r\nimport os\r\nfrom function import *\r\n\r\n\r\nm = 1000000\r\nbag = []\r\nshop = {\"parc_dattraction\" : 1000000, \"aire_de_jeu\" : 10000, \"statue\" : 1500, \"magasin_de_fleurs\": 200000, \"caserne_douvriers\": 3000, \"petite_centrale\" : 8000}\r\n\r\nopen\r\npygame.init() #Initialisation de la séance d'affichage\r\n\r\n# Définition de la couleur blanche\r\nblanc = (255, 255, 255) #Initialisation des couleurs blanches et noires\r\nnoir = (0, 0, 0)\r\n#Tout ce qui a en dessous sont des initialisation du jeu de Tom\r\n#################################################################################################\r\n#Définition des deux classes utiles pour le jeu vidéo de Tom mini_game_thief\r\nclass character:\r\n    def __init__(self):\r\n        self.speed = 2\r\n        self.life = 3\r\n        self.y = 230\r\n        self.x = 300\r\n        self.taille = (25,25)\r\n        self.position = (self.x, self.y)\r\n\r\nclass text:\r\n    def __init__(self):\r\n        self.speed = 2\r\n        self.life = 3\r\n        self.y = 270\r\n        self.x = 300\r\n        self.taille = (25,25)\r\n        self.position = (self.x, self.y)\r\n#Permet d'utiliser les classes et ses composantes du mini jeu de Tom mini_game_thief\r\nthief = character()\r\ntext = text()\r\n#Génère les images utiles au jeu vidéo de Tom, mini_game_thief\r\nthief_image_0 = pygame.image.load(\".venv/art/character_0.png\")\r\nthief_image_1 = pygame.image.load(\".venv/art/character_1.png\")\r\n#Une liste qui sert à l'animation du personnage du jeu de Tom, mini_game_thied\r\nthief_frames = [thief_image_0, thief_image_1]\r\n#Un index qui sert à l'animation du personnage du jeu de Tom, mini_game_thied\r\nindex = 0\r\n#Une liste de direction qui sert à l'animation du personnage du jeu de Tom, mini_game_thief\r\ndirection = [\"up\", \"down\", \"left\", \"right\"]\r\n#Une police d'écriture de direction qui sert au texte du jeu de Tom, mini_game_thief\r\nfont = pygame.font.Font(None, 36)  # Utilise la police par défaut avec une taille de 36 points\r\n#Plusieurs fonctions qui servent au jeu de Tom, mini_game_thief\r\ndef thief_animation(thief_frames, thief , index):\r\n    current_frame = pygame.transform.scale(thief_frames[int(index)], thief.taille)\r\n    return current_frame\r\n\r\ndef thief_walk(current_frame, thief):\r\n    screen.blit(current_frame, thief.position)\r\n\r\n#Faire une foncton qui fait avancer le bonhomme dans une direction aléatoire\r\ndef change_position(thief):\r\n    if choice == \"up\" and 0<thief.y<455 and 0<thief.x<640:\r\n        thief.y += 6\r\n    elif choice == \"down\" and 0<thief.y<455 and 0<thief.x<640:\r\n        thief.y -= 6\r\n    elif choice == \"left\" and 0<thief.x<640 and 0<thief.y<455:\r\n        thief.x -= 6\r\n    elif choice == \"right\" and 0<thief.x<640 and 0<thief.y<455:\r\n        thief.x += 6\r\n    print(choice)\r\n\r\nplay_button = pygame.image.load(\"design/play_button.png\") #On initialise une variable avec l'image du bouton.\r\nplay_button_crop = pygame.transform.scale(play_button, (150,75)) #On rogne la taille de cette image du bouton.\r\n\r\n# Création d'une surface de texte\r\ntexte_before_game_1 = font.render(\"Le voleur est sur le point de s'échapper !\", True, noir)\r\ntexte_before_game_2 = font.render(\"Clique dessus avant qu'il ne s'enfuit.\", True, noir)\r\ntexte_before_game_3 = font.render(\"Prêt ?\", True, noir)\r\ntexte_restart = font.render(\"On recommence ?\", True, noir)\r\ntexte_win = font.render(\"Bravo ! Tu l'as attrapé !\", True, noir)\r\ntexte_thief_exit = font.render(\"Il s'est echappé !\", True, noir)\r\n# Faire apparaître du texte\r\ntouch = False\r\n\r\nstart = False\r\nbefore_start = True\r\nafter_start = False\r\n##################################################################\r\n#Tout ce qui a au dessus sont des initialisation du jeu de Tom\r\ncrop = (640,455)\r\nscreen = pygame.display.set_mode((640, 455)) #L'écran affiché est de la taille 640 x 455\r\npygame.display.set_caption(\"CenTown\") #Le titre de la fenêtre est \"CenTown\"\r\n\r\n#Modifiable :\r\ntitle = pygame.image.load(\"design/pixilart-drawing.png\") #L'image jpg du logo est mis dans un format spécial dans la variable pygame. C'est le format \"surface\", nécessaire pour que pygame l'utilise.\r\nimage_rect = title.get_rect() #On met les coordonnées du titre dans une variable qu'on modifiera\r\n\r\nbackground_1 = pygame.image.load(\"design/frame-1.gif\") #On initialise trois variables background différentes qui vont être les frames de notre animation du menu.\r\nbackground_2 = pygame.image.load(\"design/frame-2.gif\")\r\nbackground_3 = pygame.image.load(\"design/frame-3.gif\")\r\nbackground_index = 0 #On initialise un compteur qui servira plus tard mais il est pas nécessaire.\r\nbackground_gif = [background_1, background_2, background_3]\r\nfor i in range(2):\r\n    background_gif[i]= pygame.transform.scale(background_gif[i], crop)\r\n\r\ncity_map = pygame.image.load(\"design/city_map.png\") #On initialise une variable avec l'image de la ville.\r\ncity_map_crop = pygame.transform.scale(city_map, crop) #On rogne cette image dde la ville aux dimensions 640, 455\r\n\r\nplay_button = pygame.image.load(\"design/play_button.png\") #On initialise une variable avec l'image du bouton.\r\nplay_button_crop = pygame.transform.scale(play_button, (150,75)) #On rogne la taille de cette image du bouton.\r\nplay_button_crop_rect = play_button_crop.get_rect() #On met la taille de la surface de ce bouton rogné, dans une variable\r\nplay_button_crop_rect = play_button_crop_rect.move((230,300)) #On déplace la surface du bouton au centre bas de l'écran\r\n\r\nshop_image = pygame.image.load(\"design/shop_image.png\")\r\nshop_image_crop = pygame.transform.scale(shop_image, (200,220))\r\nshop_image_crop_rect = shop_image_crop.get_rect()\r\nshop_image_crop_rect = shop_image_crop_rect.move((460,230))\r\n\r\nshop_button = pygame.image.load(\"design/shop_button.png\")\r\nshop_button_crop = pygame.transform.scale(shop_button, (100, 40))\r\nshop_button_crop_rect = shop_button_crop.get_rect()\r\nshop_button_crop_rect = shop_button_crop_rect.move((510,410))\r\n\r\nwall_indoor_shop = pygame.image.load(\"design/wall_shop.jpg\")\r\nwall_indoor_shop_crop = pygame.transform.scale(wall_indoor_shop,(640, 455))\r\n\r\nnuclear_central = pygame.image.load(\"design/nuclear_central.png\")\r\nnuclear_central_crop = pygame.transform.scale(nuclear_central, (230,150))\r\n\r\nnuclear_central_button = pygame.image.load(\"design/Central_button.png\")\r\nnuclear_central_button_crop = pygame.transform.scale(nuclear_central_button, (100,75))\r\n\r\nreturn_button = pygame.image.load(\"design/return_button.png\")\r\nreturn_button_crop = pygame.transform.scale(return_button, (80, 80))\r\nreturn_button_crop_rect = shop_button_crop.get_rect()\r\nreturn_button_crop_rect = return_button_crop_rect.move((20,370))\r\n\r\nchild = pygame.image.load(\"design/child.png\")\r\nchild_crop = pygame.transform.scale(child, (60,75))\r\nchild_crop_rect = child_crop.get_rect()\r\nchild_crop_rect = child_crop_rect.move((20,40))\r\n\r\nprint_title = True #On initialise une booléenne. Lorsqu'elle sera fausse, on cessera d'afficher le titre.\r\nprint_background = True #Même chose pour le fond d'écran.\r\nprint_play_button = True #Même chose pour le bouton play\r\nprint_city_map_crop = False #Mêeme chose pour la map de la ville\r\nprint_shop = False\r\nprint_indoor_shop = False\r\nprint_nuclear_central_shop = False\r\nprint_nuclear_central_logo = False\r\nprint_return_button = False\r\nprint_child = False\r\nmini_game_thief = False\r\n\r\npolice = pygame.font.SysFont(None, 48)\r\ntexte = \"Bonjour, Pygame!\"\r\n\r\nrun = True\r\nwhile run: #Tant que le programme est en cours\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT: #Tant que la croix n'a pas été cliqué, le programme continue\r\n                run = False\r\n        #Instructions  qui s'éxecute après avoir touché à bouton\r\n        if event.type == pygame.KEYDOWN: #Si la flèche du bas est saisie\r\n            if event.key == pygame.K_DOWN and image_rect.y < 170:\r\n                image_rect.y += 2 #L'ordonnée de l'image est modifiée, elle ne peut pas sortir de l'image grâce à la condition du dessus.\r\n            if event.key == pygame.K_UP and image_rect.y > -90: #Si la flèche du haut est saisia\r\n                image_rect.y -= 2 #Même chose que plus haut\r\n\r\n        #Instruction d'appuyer sur un boutton\r\n        if event.type == pygame.MOUSEBUTTONDOWN:\r\n\r\n            if play_button_crop_rect.collidepoint(event.pos)and (mini_game_thief==False):#Lorsqu'on appuie sur le bouton entrée\r\n                hub = open_town() #J'associe à une variable, les 5 qui sont retournées par la fonction \"open town()\", qui affiche uniquement les images qui sont nécessaire au menu de la ville : donc les images du shop, du fond d'écran et de l'enfant.\r\n                print_play_button,print_title,print_city_map_crop,print_shop,print_child = hub #Je mets à jours les 5 variables, en leur donnant leur nouvelle valeur \"true\" ou \"false\" qui sont comprise dans \"hub\"\r\n\r\n            if (shop_button_crop_rect.collidepoint(event.pos) and print_city_map_crop ==True) or (shop_image_crop_rect.collidepoint(event.pos) and print_city_map_crop==True) and (mini_game_thief==False): #Lorsqu'on appuie sur le bouton shop\r\n                hub = close_town()\r\n                print_city_map_crop, print_shop, print_child = hub\r\n                shop = open_shop()#J'associe à une variable, les 5 qui sont retournées par la fonction \"open town()\", qui affiche uniquement les images qui sont nécessaire à la boutique\r\n                print_indoor_shop, print_nuclear_central_shop, print_nuclear_central_logo, print_return_button = shop#Je mets à jours les 5 variables, en leur donnant leur nouvelle valeur \"true\" ou \"false\" qui sont comprise dans \"shop\".\r\n\r\n            if return_button_crop_rect.collidepoint(event.pos) and (print_indoor_shop == True) and (mini_game_thief==False): #Si je suis dans le shop et que je clique sur le bouton return alors je reviens à l'affichage de la ville.\r\n                hub = close_shop()\r\n                print_indoor_shop, print_nuclear_central_shop, print_nuclear_central_logo, print_return_button = hub\r\n                hub = open_town()\r\n                print_play_button,print_title,print_city_map_crop,print_shop,print_child = hub\r\n\r\n            if child_crop_rect.collidepoint(event.pos) and (print_city_map_crop == True):\r\n                mini_game_thief = True\r\n\r\n\r\n        #Instructions pour pour l'affichage d'une image\r\n        if print_background == True: #tant qu'on met la variable à Vrai, on affiche le fond d'écran\r\n            if background_index >2: #Une suite d'instructions qui font en sorte que les éléments du décor s'affichent avec une certaine latence.\r\n                background_index = 0\r\n            if background_index <=2:\r\n                screen.blit(background_gif[int(background_index)],(0,0))\r\n                background_index = background_index+0.015 #Plus la valeur additionnée sera basse, plus la transition sera lente.\r\n\r\n        if print_city_map_crop == True:\r\n            screen.blit(city_map_crop,(0,0))\r\n        if print_shop == True:\r\n            screen.blit(shop_image_crop, (460, 230))\r\n            screen.blit(shop_button_crop, (510,410))\r\n        if print_title == True: #Tant qu'on met la variable à Vrai, on affiche le titre\r\n            screen.blit(title,(-20, image_rect.y))\r\n        if print_play_button == True:\r\n            screen.blit(play_button_crop,(230,300))\r\n        if print_indoor_shop == True    :\r\n            screen.blit(wall_indoor_shop_crop,(0,0))\r\n        if print_nuclear_central_shop == True:\r\n            screen.blit(nuclear_central_crop,(0,70))\r\n        if print_nuclear_central_logo == True:\r\n            screen.blit(nuclear_central_button_crop,(65,190))\r\n        if print_return_button == True:\r\n            screen.blit(return_button_crop,(20,350))\r\n        if print_child == True:\r\n            screen.blit(child_crop,(20,40))\r\n        pygame.display.update() #Mise à jour continue du programme\r\n\r\n        if mini_game_thief == True:\r\n            print_child = False\r\n            print_shop = False\r\n            print_background = False\r\n            print_city_map_crop = False\r\n            screen.fill(blanc)\r\n            # L'animation du bonhomme\r\n            index += 0.00001  # Incrémentez l'index\r\n            index = index + 0.01\r\n            if (index >= 2):\r\n                index = 0\r\n            if before_start == True:\r\n                touch = False\r\n                screen.blit(texte_before_game_1, (100, 90))\r\n                screen.blit(texte_before_game_2, (110, 150))\r\n                screen.blit(texte_before_game_3, (200, 360))\r\n                screen.blit(play_button_crop, (300, 330))\r\n                play_button_crop_rect = play_button_crop.get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\r\n                play_button_crop_rect = play_button_crop_rect.move((300, 330))\r\n                if event.type == pygame.MOUSEBUTTONDOWN:\r\n                    if play_button_crop_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\r\n                        before_start = False\r\n                        start = True\r\n                thief.x, thief.y = 300, 230\r\n                screen.blit(thief_animation(thief_frames, thief, index), (thief.x, thief.y))\r\n\r\n            if start == True:\r\n                # Un choix aléatoire est fait\r\n                choice = random.choice(direction)\r\n\r\n                if (thief.y <= 0) or (thief.y >= 455) or (640 <= thief.x) or (thief.x <= 0):\r\n                    touch = True\r\n                if touch == True:\r\n                    screen.blit(texte_thief_exit, text.position)\r\n                    screen.blit(texte_restart, (295, 300))\r\n                    screen.blit(play_button_crop, (325, 340))\r\n                    play_button_crop_rect = play_button_crop.get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\r\n                    play_button_crop_rect = play_button_crop_rect.move((325, 340))\r\n                    if event.type == pygame.MOUSEBUTTONDOWN and touch == True:\r\n                        if play_button_crop_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\r\n                            before_start = True\r\n                            start = False\r\n                # Lorsque le choix est fait thief.x et thief.y sont modifiés\r\n                change_position(thief)\r\n                print(thief.x, thief.y)\r\n                # On met la surface du voleur dans une variable rect (obligatoire pour la collision future avec le curseur)\r\n                current_frame_rect = thief_animation(thief_frames, thief,\r\n                                                     index).get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\r\n                # On veut que la surface se déplace aux mêmes positions que le voleur\r\n                current_frame_rect = current_frame_rect.move(thief.x, thief.y)\r\n                if event.type == pygame.MOUSEBUTTONDOWN and touch == False:\r\n                    if current_frame_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\r\n                        before_start = False\r\n                        start = False\r\n                        after_start = True\r\n                # Actualise l'affichage du voleur avec les nouvelles coordonnées et sa bonne frame d'animation\r\n                screen.blit(thief_animation(thief_frames, thief, index), (thief.x, thief.y))\r\n            if after_start == True:\r\n                screen.blit(texte_win, (260, 300))\r\n            # Rafraîchir l'affichage\r\n            pygame.display.flip()\r\n\r\n# Remplir l'écran avec la couleur blanche\r\n\r\n# Boucle principale du jeu\r\n\r\n\r\n\r\npygame.quit()\r\nquit()\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/main.py b/main.py
---- a/main.py	(revision aa60d7260a9baca3515b3d74e153381fdf354332)
-+++ b/main.py	(date 1716364962955)
-@@ -32,7 +32,7 @@
-         self.speed = 2
-         self.life = 3
-         self.y = 270
--        self.x = 300
-+        self.x = 220
-         self.taille = (25,25)
-         self.position = (self.x, self.y)
- #Permet d'utiliser les classes et ses composantes du mini jeu de Tom mini_game_thief
-@@ -140,6 +140,17 @@
- child_crop_rect = child_crop.get_rect()
- child_crop_rect = child_crop_rect.move((20,40))
- 
-+library = pygame.image.load("design/library.jpg")
-+library_crop = pygame.transform.scale(library, (670,455))
-+library_crop_rect = library_crop.get_rect()
-+library_crop_rect = library_crop_rect.move((0,0))
-+
-+chapitre1 = pygame.image.load("design/chapitre1.png")
-+chapitre1_crop = pygame.transform.scale(chapitre1, (180,105))
-+chapitre1_crop_rect = chapitre1_crop.get_rect()
-+chapitre1_crop_rect = chapitre1_crop_rect.move((230,80))
-+
-+
- print_title = True #On initialise une booléenne. Lorsqu'elle sera fausse, on cessera d'afficher le titre.
- print_background = True #Même chose pour le fond d'écran.
- print_play_button = True #Même chose pour le bouton play
-@@ -151,6 +162,13 @@
- print_return_button = False
- print_child = False
- mini_game_thief = False
-+print_library = False
-+print_chapitre1 = False
-+print_chapitre2_grey = False
-+print_chapitre3_grey = False
-+print_chapitre4_grey = False
-+print_chapitre5_grey = False
-+
- 
- police = pygame.font.SysFont(None, 48)
- texte = "Bonjour, Pygame!"
-@@ -187,8 +205,24 @@
-                 print_play_button,print_title,print_city_map_crop,print_shop,print_child = hub
- 
-             if child_crop_rect.collidepoint(event.pos) and (print_city_map_crop == True):
-+                print_library = True
-+                print_return_button = True
-+                print_chapitre1 = True
-+
-+            if chapitre1_crop_rect.collidepoint(event.pos) and (print_library == True):
-+                print_library = False
-+                print_return_button = True
-+                print_chapitre1= False
-                 mini_game_thief = True
- 
-+            if return_button_crop_rect.collidepoint(event.pos) and (print_library == True) and (mini_game_thief==False): #Si je suis dans la librairie et que je clique sur le bouton return alors je reviens à l'affichage de la ville.
-+                print_library = False
-+                print_chapitre1 = False
-+                print_return_button = True
-+
-+
-+
-+
- 
-         #Instructions pour pour l'affichage d'une image
-         if print_background == True: #tant qu'on met la variable à Vrai, on affiche le fond d'écran
-@@ -213,11 +247,14 @@
-             screen.blit(nuclear_central_crop,(0,70))
-         if print_nuclear_central_logo == True:
-             screen.blit(nuclear_central_button_crop,(65,190))
--        if print_return_button == True:
--            screen.blit(return_button_crop,(20,350))
-         if print_child == True:
-             screen.blit(child_crop,(20,40))
--        pygame.display.update() #Mise à jour continue du programme
-+        if print_library==True:
-+            screen.blit(library_crop,(0,0))
-+        if print_chapitre1 == True:
-+            screen.blit(chapitre1_crop, (230, 80))
-+        pygame.display.update() #Mise à jour
-+        # continue du programme
- 
-         if mini_game_thief == True:
-             print_child = False
-@@ -253,10 +290,10 @@
-                     touch = True
-                 if touch == True:
-                     screen.blit(texte_thief_exit, text.position)
--                    screen.blit(texte_restart, (295, 300))
--                    screen.blit(play_button_crop, (325, 340))
-+                    screen.blit(texte_restart, (215, 300))
-+                    screen.blit(play_button_crop, (235, 340))
-                     play_button_crop_rect = play_button_crop.get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable
--                    play_button_crop_rect = play_button_crop_rect.move((325, 340))
-+                    play_button_crop_rect = play_button_crop_rect.move((225, 340))
-                     if event.type == pygame.MOUSEBUTTONDOWN and touch == True:
-                         if play_button_crop_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée
-                             before_start = True
-@@ -265,8 +302,7 @@
-                 change_position(thief)
-                 print(thief.x, thief.y)
-                 # On met la surface du voleur dans une variable rect (obligatoire pour la collision future avec le curseur)
--                current_frame_rect = thief_animation(thief_frames, thief,
--                                                     index).get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable
-+                current_frame_rect = thief_animation(thief_frames, thief,index).get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable
-                 # On veut que la surface se déplace aux mêmes positions que le voleur
-                 current_frame_rect = current_frame_rect.move(thief.x, thief.y)
-                 if event.type == pygame.MOUSEBUTTONDOWN and touch == False:
-@@ -277,7 +313,9 @@
-                 # Actualise l'affichage du voleur avec les nouvelles coordonnées et sa bonne frame d'animation
-                 screen.blit(thief_animation(thief_frames, thief, index), (thief.x, thief.y))
-             if after_start == True:
--                screen.blit(texte_win, (260, 300))
-+                screen.blit(texte_win, (190, 190))
-+            if print_return_button == True:
-+                screen.blit(return_button_crop, (20, 350))
-             # Rafraîchir l'affichage
-             pygame.display.flip()
- 
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"edce05e2-d3c4-49e5-89e0-cf79955592d7\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2cRW3Q0NGM70iKhtSg1yjXsGMgG\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.Main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.function.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;add__game&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"edce05e2-d3c4-49e5-89e0-cf79955592d7\" name=\"Changes\" comment=\"\" />\r\n      <created>1708074672025</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1708074672025</updated>\r\n      <workItem from=\"1708074678526\" duration=\"3718000\" />\r\n      <workItem from=\"1708087823300\" duration=\"13525000\" />\r\n      <workItem from=\"1708285219633\" duration=\"632000\" />\r\n      <workItem from=\"1708328874394\" duration=\"6232000\" />\r\n      <workItem from=\"1708450964155\" duration=\"3496000\" />\r\n      <workItem from=\"1708939643458\" duration=\"2073000\" />\r\n      <workItem from=\"1709038054131\" duration=\"81000\" />\r\n      <workItem from=\"1709131260502\" duration=\"2405000\" />\r\n      <workItem from=\"1709298049034\" duration=\"8758000\" />\r\n      <workItem from=\"1709901486335\" duration=\"25000\" />\r\n      <workItem from=\"1709909622873\" duration=\"456000\" />\r\n      <workItem from=\"1710336976803\" duration=\"725000\" />\r\n      <workItem from=\"1710486721986\" duration=\"316000\" />\r\n      <workItem from=\"1710487723623\" duration=\"79000\" />\r\n      <workItem from=\"1710487931556\" duration=\"35000\" />\r\n      <workItem from=\"1710488331080\" duration=\"34000\" />\r\n      <workItem from=\"1710488443436\" duration=\"8000\" />\r\n      <workItem from=\"1710488550548\" duration=\"22000\" />\r\n      <workItem from=\"1712225523219\" duration=\"797000\" />\r\n      <workItem from=\"1715095744851\" duration=\"1399000\" />\r\n      <workItem from=\"1715428432893\" duration=\"17000\" />\r\n      <workItem from=\"1715429718338\" duration=\"1041000\" />\r\n      <workItem from=\"1715432396416\" duration=\"19000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Central_project$function.coverage\" NAME=\"function Coverage Results\" MODIFIED=\"1709309072408\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Central_project$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1715432397476\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Central_project$Main.coverage\" NAME=\"Main Coverage Results\" MODIFIED=\"1708074758671\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision aa60d7260a9baca3515b3d74e153381fdf354332)
-+++ b/.idea/workspace.xml	(date 1716365112765)
-@@ -6,6 +6,7 @@
-   <component name="ChangeListManager">
-     <list default="true" id="edce05e2-d3c4-49e5-89e0-cf79955592d7" name="Changes" comment="">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -31,23 +32,23 @@
-     <option name="hideEmptyMiddlePackages" value="true" />
-     <option name="showLibraryContents" value="true" />
-   </component>
--  <component name="PropertiesComponent">{
--  &quot;keyToString&quot;: {
--    &quot;Python.Main.executor&quot;: &quot;Run&quot;,
--    &quot;Python.function.executor&quot;: &quot;Run&quot;,
--    &quot;Python.main.executor&quot;: &quot;Run&quot;,
--    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
--    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
--    &quot;git-widget-placeholder&quot;: &quot;add__game&quot;,
--    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
--    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
--    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
--    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
--    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
--    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
--    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
-+  <component name="PropertiesComponent"><![CDATA[{
-+  "keyToString": {
-+    "Python.Main.executor": "Run",
-+    "Python.function.executor": "Run",
-+    "Python.main.executor": "Run",
-+    "RunOnceActivity.OpenProjectViewOnStart": "true",
-+    "RunOnceActivity.ShowReadmeOnStart": "true",
-+    "git-widget-placeholder": "master",
-+    "node.js.detected.package.eslint": "true",
-+    "node.js.detected.package.tslint": "true",
-+    "node.js.selected.package.eslint": "(autodetect)",
-+    "node.js.selected.package.tslint": "(autodetect)",
-+    "nodejs_package_manager_path": "npm",
-+    "settings.editor.selected.configurable": "preferences.pluginManager",
-+    "vue.rearranger.settings.migration": "true"
-   }
--}</component>
-+}]]></component>
-   <component name="SharedIndexes">
-     <attachedChunks>
-       <set>
-@@ -86,6 +87,9 @@
-       <workItem from="1715428432893" duration="17000" />
-       <workItem from="1715429718338" duration="1041000" />
-       <workItem from="1715432396416" duration="19000" />
-+      <workItem from="1715432433284" duration="2298000" />
-+      <workItem from="1715438010247" duration="90000" />
-+      <workItem from="1716358489558" duration="6451000" />
-     </task>
-     <servers />
-   </component>
-@@ -94,7 +98,7 @@
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-     <SUITE FILE_PATH="coverage/Central_project$function.coverage" NAME="function Coverage Results" MODIFIED="1709309072408" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
--    <SUITE FILE_PATH="coverage/Central_project$main.coverage" NAME="main Coverage Results" MODIFIED="1715432397476" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-+    <SUITE FILE_PATH="coverage/Central_project$main.coverage" NAME="main Coverage Results" MODIFIED="1716364962965" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-     <SUITE FILE_PATH="coverage/Central_project$Main.coverage" NAME="Main Coverage Results" MODIFIED="1708074758671" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11__Changes_.xml	(revision c8301dc198ae8cfb6c38c308b3b25a46f70ff517)
+++ /dev/null	(revision c8301dc198ae8cfb6c38c308b3b25a46f70ff517)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_22_05_2024_10_11_[Changes]" date="1716365478145" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 22/05/2024 10:11 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"edce05e2-d3c4-49e5-89e0-cf79955592d7\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/design/city_map.png-autosave.kra\" beforeDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"library\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 7\n}</component>\n  <component name=\"ProjectId\" id=\"2cRW3Q0NGM70iKhtSg1yjXsGMgG\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;Python.Main.executor&quot;: &quot;Run&quot;,\n    &quot;Python.function.executor&quot;: &quot;Run&quot;,\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"edce05e2-d3c4-49e5-89e0-cf79955592d7\" name=\"Changes\" comment=\"\" />\n      <created>1708074672025</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1708074672025</updated>\n      <workItem from=\"1708074678526\" duration=\"3718000\" />\n      <workItem from=\"1708087823300\" duration=\"13525000\" />\n      <workItem from=\"1708285219633\" duration=\"632000\" />\n      <workItem from=\"1708328874394\" duration=\"6232000\" />\n      <workItem from=\"1708450964155\" duration=\"3496000\" />\n      <workItem from=\"1708939643458\" duration=\"2073000\" />\n      <workItem from=\"1709038054131\" duration=\"81000\" />\n      <workItem from=\"1709131260502\" duration=\"2405000\" />\n      <workItem from=\"1709298049034\" duration=\"8758000\" />\n      <workItem from=\"1709901486335\" duration=\"25000\" />\n      <workItem from=\"1709909622873\" duration=\"456000\" />\n      <workItem from=\"1710336976803\" duration=\"725000\" />\n      <workItem from=\"1710486721986\" duration=\"316000\" />\n      <workItem from=\"1710487723623\" duration=\"79000\" />\n      <workItem from=\"1710487931556\" duration=\"35000\" />\n      <workItem from=\"1710488331080\" duration=\"34000\" />\n      <workItem from=\"1710488443436\" duration=\"8000\" />\n      <workItem from=\"1710488550548\" duration=\"22000\" />\n      <workItem from=\"1712225523219\" duration=\"797000\" />\n      <workItem from=\"1715095744851\" duration=\"1399000\" />\n      <workItem from=\"1715428432893\" duration=\"17000\" />\n      <workItem from=\"1715429718338\" duration=\"1041000\" />\n      <workItem from=\"1715432396416\" duration=\"19000\" />\n      <workItem from=\"1715432433284\" duration=\"2298000\" />\n      <workItem from=\"1715438010247\" duration=\"90000\" />\n      <workItem from=\"1716358489558\" duration=\"7377000\" />\n      <workItem from=\"1716382228473\" duration=\"173000\" />\n      <workItem from=\"1716576626395\" duration=\"3033000\" />\n      <workItem from=\"1716753887595\" duration=\"5899000\" />\n      <workItem from=\"1716816673283\" duration=\"628000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/Central_project$function.coverage\" NAME=\"function Coverage Results\" MODIFIED=\"1709309072408\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Central_project$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1716759799095\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Central_project$Main.coverage\" NAME=\"Main Coverage Results\" MODIFIED=\"1708074758671\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c8301dc198ae8cfb6c38c308b3b25a46f70ff517)
+++ b/.idea/workspace.xml	(date 1717160805362)
@@ -5,8 +5,14 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="edce05e2-d3c4-49e5-89e0-cf79955592d7" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/central.jpeg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/quizz.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/Central_project.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/Central_project.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/design/city_map.png-autosave.kra" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -30,6 +36,9 @@
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProblemsViewState">
+    <option name="selectedTabId" value="ProjectErrors" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 7
@@ -50,13 +59,14 @@
     &quot;Python.main.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
     &quot;git-widget-placeholder&quot;: &quot;master&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
     &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
     &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
     &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;terminal&quot;,
     &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
 }</component>
@@ -105,6 +115,8 @@
       <workItem from="1716576626395" duration="3033000" />
       <workItem from="1716753887595" duration="5899000" />
       <workItem from="1716816673283" duration="628000" />
+      <workItem from="1717100529045" duration="510000" />
+      <workItem from="1717136376359" duration="7550000" />
     </task>
     <servers />
   </component>
@@ -113,10 +125,25 @@
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/main.py</url>
+          <line>245</line>
+          <option name="timeStamp" value="1" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Central_project$function.coverage" NAME="function Coverage Results" MODIFIED="1709309072408" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Central_project$main.coverage" NAME="main Coverage Results" MODIFIED="1716759799095" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Central_project$Main.coverage" NAME="Main Coverage Results" MODIFIED="1708074758671" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Central_project$c.coverage" NAME="c Coverage Results" MODIFIED="1716820059478" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Central_project$jeux1bis.coverage" NAME="jeux1bis Coverage Results" MODIFIED="1716820249275" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Central_project$main.coverage" NAME="main Coverage Results" MODIFIED="1717143707667" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Central_project$pygame.coverage" NAME="pygame Coverage Results" MODIFIED="1716653673362" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Central_project$quizz.coverage" NAME="quizz Coverage Results" MODIFIED="1717142846535" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Central_project$function.coverage" NAME="function Coverage Results" MODIFIED="1709309072408" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/Central_project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Central_project.iml b/.idea/Central_project.iml
--- a/.idea/Central_project.iml	(revision c8301dc198ae8cfb6c38c308b3b25a46f70ff517)
+++ b/.idea/Central_project.iml	(date 1716817604086)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.venv" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.12" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: quizz.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/quizz.py b/quizz.py
new file mode 100644
--- /dev/null	(date 1717143017952)
+++ b/quizz.py	(date 1717143017952)
@@ -0,0 +1,144 @@
+import pygame
+import sys
+
+# Initialisation de Pygame
+pygame.init()
+
+# Paramètres de la fenêtre
+WIDTH = 640
+HEIGHT = 455
+WHITE = (255, 255, 255)
+BLACK = (0, 0, 0)
+FONT_SIZE = 26
+
+# Définition des questions et réponses
+questions = [
+    "Comment appelle-t-on le gaz responsable du réchauffement climatique ?",
+    "Comment s’appelle les scientifique qui étudient le climat ?",
+    "Quelle est la principale cause de pollution de la terre ?",
+    "Quel est l'effet de l'utilisation du charbon sur l'air ?",
+    "Quel impact a l'exploitation minière du charbon ?",
+    "Pourquoi le charbon est une source d'énergie non renouvelable ? Car",
+    "Quel effet a le charbon sur le changement climatique ?",
+    "Pourquoi l'énergie nucléaire est-elle une source d'énergie propre ? Car"
+]
+
+answers = [
+    ["Gaz a effet de serre", "Gaz de serre", "Gaz toxique", "Gaz naturel"],
+    ["Le giec", "L’onu", "Brics", "Pas de nom"],
+    ["Nucléaire", "Hydraulique", "Charbon", "Pétrole"],
+    ["améliore la qualité de l'air",
+     "contribue à la pollution de l'air",
+     "aucun impact",
+     "produit de l'oxygène en brûlant"],
+    ["favorise la biodiversité",
+     "détruit les écosystèmes",
+     "aucun impact",
+     "protège les zones sauvages"],
+    ["fabriqué à partir de matières recyclées",
+     "produit en grandes quantités",
+     "se forme naturellement et rapidement",
+     "se forme durant des millions d'années"],
+    ["contribue à refroidir la planète",
+     "réduit les émissions de CO2",
+     "accélère le réchauffement de la planète",
+     "aucun impact"],
+    ["produit moins de déchets que les autres",
+     "elle n'émet aucun gaz"]
+]
+
+correct_choices = [0, 0, 2, 1, 1, 3, 2, 0]  # Index des bonnes réponses pour chaque question
+
+# Initialisation de la fenêtre principale
+screen = pygame.display.set_mode((WIDTH, HEIGHT))
+pygame.display.set_caption("Quiz sur l'environnement")
+
+# Chargement de l'image de fond
+background = pygame.image.load("central.jpeg")
+background = pygame.transform.scale(background, (WIDTH, HEIGHT))
+
+# Initialisation de la police
+font = pygame.font.SysFont(None, FONT_SIZE)
+
+
+# Fonction pour afficher le texte
+def draw_text(text, font, color, surface, x, y):
+    text_obj = font.render(text, True, color)
+    text_rect = text_obj.get_rect()
+    text_rect.center = (x, y)
+    surface.blit(text_obj, text_rect)
+
+
+# Fonction pour afficher les questions et les réponses
+def show_question(question_index):
+    screen.blit(background, (0, 0))
+    draw_text(questions[question_index], font, BLACK, screen, WIDTH // 2, HEIGHT // 4)
+
+    # Affichage des réponses sous forme de boutons
+    buttons = []
+    for i, answer in enumerate(answers[question_index]):
+        button_rect = pygame.Rect(WIDTH // 2 - 200, HEIGHT // 2 + i * 50, 400, 40)
+        pygame.draw.rect(screen, BLACK, button_rect, 2)
+        draw_text(answer, font, BLACK, screen, button_rect.centerx, button_rect.centery)
+        buttons.append(button_rect)
+
+    return buttons
+
+
+# Fonction pour afficher l'écran de démarrage
+def show_start_screen():
+    screen.blit(background, (0, 0))
+    draw_text("Appuyez sur Start pour commencer", font, BLACK, screen, WIDTH // 2, HEIGHT // 2)
+
+
+"""from quizz import *
+def main():
+    current_question = 0
+    score = 0
+    show_start_screen()
+    start_button = pygame.Rect(WIDTH // 2 - 50, HEIGHT // 2 + 50, 100, 50)
+
+    while True:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                pygame.quit()
+                sys.exit()
+            elif event.type == pygame.MOUSEBUTTONDOWN:
+                mouse_pos = pygame.mouse.get_pos()
+                if start_button.collidepoint(mouse_pos):
+                    while current_question < len(questions):
+                        buttons = show_question(current_question)
+                        pygame.display.flip()
+                        waiting = True
+                        while waiting:
+                            for event in pygame.event.get():
+                                if event.type == pygame.QUIT:
+                                    pygame.quit()
+                                    sys.exit()
+                                elif event.type == pygame.MOUSEBUTTONDOWN:
+                                    mouse_pos = pygame.mouse.get_pos()
+                                    for i, button in enumerate(buttons):
+                                        if button.collidepoint(mouse_pos):
+                                            waiting = False
+                                            if i == correct_choices[current_question]:
+                                                score += 1
+                                            current_question += 1
+                                            break
+                    screen.blit(background, (0, 0))
+                    draw_text("Votre score est : " + str(score) + "/" + str(len(questions)), font, BLACK, screen,
+                              WIDTH // 2, HEIGHT // 2)
+                    pygame.display.flip()
+                    pygame.time.wait(5000)
+                    pygame.quit()
+                    sys.exit()
+
+        pygame.draw.rect(screen, BLACK, start_button)
+        draw_text("Start", font, WHITE, screen, start_button.centerx, start_button.centery)
+
+        pygame.display.flip()
+
+
+if __name__ == "__main__":
+    main()
+"""
+
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"Black\">\n    <option name=\"sdkName\" value=\"Python 3.11 (Central_project)\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11 (Central_project)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c8301dc198ae8cfb6c38c308b3b25a46f70ff517)
+++ b/.idea/misc.xml	(date 1716817604103)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.11 (Central_project)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (Central_project)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
