Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport random\r\nimport sys\r\nimport os\r\nfrom function import *\r\n\r\n\r\nm = 1000000\r\nbag = []\r\nshop = {\"parc_dattraction\" : 1000000, \"aire_de_jeu\" : 10000, \"statue\" : 1500, \"magasin_de_fleurs\": 200000, \"caserne_douvriers\": 3000, \"petite_centrale\" : 8000}\r\n\r\nopen\r\npygame.init() #Initialisation de la séance d'affichage\r\n\r\n# Définition de la couleur blanche\r\nblanc = (255, 255, 255) #Initialisation des couleurs blanches et noires\r\nnoir = (0, 0, 0)\r\n#Tout ce qui a en dessous sont des initialisation du jeu de Tom\r\n#################################################################################################\r\n#Définition des deux classes utiles pour le jeu vidéo de Tom mini_game_thief\r\nclass character:\r\n    def __init__(self):\r\n        self.speed = 2\r\n        self.life = 3\r\n        self.y = 230\r\n        self.x = 300\r\n        self.taille = (25,25)\r\n        self.position = (self.x, self.y)\r\n\r\nclass text:\r\n    def __init__(self):\r\n        self.speed = 2\r\n        self.life = 3\r\n        self.y = 270\r\n        self.x = 220\r\n        self.taille = (25,25)\r\n        self.position = (self.x, self.y)\r\n#Permet d'utiliser les classes et ses composantes du mini jeu de Tom mini_game_thief\r\nthief = character()\r\ntext = text()\r\n#Génère les images utiles au jeu vidéo de Tom, mini_game_thief\r\nthief_image_0 = pygame.image.load(\".venv/art/character_0.png\")\r\nthief_image_1 = pygame.image.load(\".venv/art/character_1.png\")\r\n#Une liste qui sert à l'animation du personnage du jeu de Tom, mini_game_thied\r\nthief_frames = [thief_image_0, thief_image_1]\r\n#Un index qui sert à l'animation du personnage du jeu de Tom, mini_game_thied\r\nindex = 0\r\n#Une liste de direction qui sert à l'animation du personnage du jeu de Tom, mini_game_thief\r\ndirection = [\"up\", \"down\", \"left\", \"right\"]\r\n#Une police d'écriture de direction qui sert au texte du jeu de Tom, mini_game_thief\r\nfont = pygame.font.Font(None, 36)  # Utilise la police par défaut avec une taille de 36 points\r\nfont2 = pygame.font.Font(None, 66)\r\n#Plusieurs fonctions qui servent au jeu de Tom, mini_game_thief\r\ndef thief_animation(thief_frames, thief , index):\r\n    current_frame = pygame.transform.scale(thief_frames[int(index)], thief.taille)\r\n    return current_frame\r\n\r\ndef thief_walk(current_frame, thief):\r\n    screen.blit(current_frame, thief.position)\r\n\r\n#Faire une foncton qui fait avancer le bonhomme dans une direction aléatoire\r\ndef change_position(thief):\r\n    if choice == \"up\" and 0<thief.y<455 and 0<thief.x<640:\r\n        thief.y += 1\r\n    elif choice == \"down\" and 0<thief.y<455 and 0<thief.x<640:\r\n        thief.y -= 1\r\n    elif choice == \"left\" and 0<thief.x<640 and 0<thief.y<455:\r\n        thief.x -= 1\r\n    elif choice == \"right\" and 0<thief.x<640 and 0<thief.y<455:\r\n        thief.x += 1\r\n    print(choice)\r\n\r\nplay_button = pygame.image.load(\"design/play_button.png\") #On initialise une variable avec l'image du bouton.\r\nplay_button_crop = pygame.transform.scale(play_button, (150,75)) #On rogne la taille de cette image du bouton.\r\n\r\n# Création d'une surface de texte\r\ntexte_before_game_1 = font.render(\"Le voleur est sur le point de s'échapper !\", True, noir)\r\ntexte_before_game_2 = font.render(\"Clique dessus avant qu'il ne s'enfuit.\", True, noir)\r\ntexte_before_game_3 = font.render(\"Prêt ?\", True, noir)\r\ntexte_restart = font.render(\"On recommence ?\", True, noir)\r\ntexte_win = font2.render(\"Bravo ! Tu l'as attrapé !\", True, blanc)\r\ntexte_win_rect = texte_win.get_rect()\r\ntexte_win_rect = texte_win_rect.move((85,230))\r\ntext_discover_map = font.render(\"Clique sur la carte pour l'actualiser.\", True, blanc)\r\ntexte_thief_exit = font.render(\"Il s'est echappé !\", True, noir)\r\n# Faire apparaître du texte\r\ntouch = False\r\n\r\nstart = False\r\nbefore_start = True\r\nafter_start = False\r\n##################################################################\r\n#Tout ce qui a au dessus sont des initialisation du jeu de Tom\r\ncrop = (640,455)\r\nscreen = pygame.display.set_mode((640, 455)) #L'écran affiché est de la taille 640 x 455\r\npygame.display.set_caption(\"CenTown\") #Le titre de la fenêtre est \"CenTown\"\r\n\r\n#Modifiable :\r\ntitle = pygame.image.load(\"design/pixilart-drawing.png\") #L'image jpg du logo est mis dans un format spécial dans la variable pygame. C'est le format \"surface\", nécessaire pour que pygame l'utilise.\r\nimage_rect = title.get_rect() #On met les coordonnées du titre dans une variable qu'on modifiera\r\n\r\nbackground_1 = pygame.image.load(\"design/frame-1.gif\") #On initialise trois variables background différentes qui vont être les frames de notre animation du menu.\r\nbackground_2 = pygame.image.load(\"design/frame-2.gif\")\r\nbackground_3 = pygame.image.load(\"design/frame-3.gif\")\r\nbackground_index = 0 #On initialise un compteur qui servira plus tard mais il est pas nécessaire.\r\nbackground_gif = [background_1, background_2, background_3]\r\nfor i in range(2):\r\n    background_gif[i]= pygame.transform.scale(background_gif[i], crop)\r\n\r\ncity_map = pygame.image.load(\"design/city_map_grey.png\") #On initialise une variable avec l'image de la ville.\r\ncity_map_crop = pygame.transform.scale(city_map, crop) #On rogne cette image dde la ville aux dimensions 640, 455\r\n\r\nplay_button = pygame.image.load(\"design/play_button.png\") #On initialise une variable avec l'image du bouton.\r\nplay_button_crop = pygame.transform.scale(play_button, (150,75)) #On rogne la taille de cette image du bouton.\r\nplay_button_crop_rect = play_button_crop.get_rect() #On met la taille de la surface de ce bouton rogné, dans une variable\r\nplay_button_crop_rect = play_button_crop_rect.move((230,300)) #On déplace la surface du bouton au centre bas de l'écran\r\n\r\nshop_image = pygame.image.load(\"design/shop_image.png\")\r\nshop_image_crop = pygame.transform.scale(shop_image, (200,220))\r\nshop_image_crop_rect = shop_image_crop.get_rect()\r\nshop_image_crop_rect = shop_image_crop_rect.move((460,230))\r\n\r\nshop_button = pygame.image.load(\"design/shop_button.png\")\r\nshop_button_crop = pygame.transform.scale(shop_button, (100, 40))\r\nshop_button_crop_rect = shop_button_crop.get_rect()\r\nshop_button_crop_rect = shop_button_crop_rect.move((510,410))\r\n\r\nwall_indoor_shop = pygame.image.load(\"design/wall_shop.jpg\")\r\nwall_indoor_shop_crop = pygame.transform.scale(wall_indoor_shop,(640, 455))\r\n\r\nnuclear_central = pygame.image.load(\"design/nuclear_central.png\")\r\nnuclear_central_crop = pygame.transform.scale(nuclear_central, (230,150))\r\n\r\nnuclear_central_button = pygame.image.load(\"design/Central_button.png\")\r\nnuclear_central_button_crop = pygame.transform.scale(nuclear_central_button, (100,75))\r\n\r\nreturn_button = pygame.image.load(\"design/return_button.png\")\r\nreturn_button_crop = pygame.transform.scale(return_button, (80, 80))\r\nreturn_button_crop_rect = return_button_crop.get_rect()\r\nreturn_button_crop_rect = return_button_crop_rect.move((20,370))\r\n\r\nchild = pygame.image.load(\"design/child.png\")\r\nchild_crop = pygame.transform.scale(child, (60,75))\r\nchild_crop_rect = child_crop.get_rect()\r\nchild_crop_rect = child_crop_rect.move((20,40))\r\n\r\nlibrary = pygame.image.load(\"design/library.jpg\")\r\nlibrary_crop = pygame.transform.scale(library, (670,455))\r\nlibrary_crop_rect = library_crop.get_rect()\r\nlibrary_crop_rect = library_crop_rect.move((0,0))\r\n\r\nchapitre1 = pygame.image.load(\"design/chapitre1.png\")\r\nchapitre1_crop = pygame.transform.scale(chapitre1, (180,105))\r\nchapitre1_crop_rect = chapitre1_crop.get_rect()\r\nchapitre1_crop_rect = chapitre1_crop_rect.move((240, 20))\r\n\r\nchapitre2grey = pygame.image.load(\"design/chapitre2-grey.png\")\r\nchapitre2grey_crop = pygame.transform.scale(chapitre2grey, (180,105))\r\nchapitre2grey_crop_rect = chapitre2grey_crop.get_rect()\r\nchapitre2grey_crop_rect = chapitre2grey_crop_rect.move((240,100))\r\n\r\nchapitre3grey = pygame.image.load(\"design/chapitre3-grey.png\")\r\nchapitre3grey_crop = pygame.transform.scale(chapitre3grey, (180,105))\r\nchapitre3grey_crop_rect = chapitre3grey_crop.get_rect()\r\nchapitre3grey_crop_rect = chapitre3grey_crop_rect.move((240, 180))\r\n\r\nchapitre4grey = pygame.image.load(\"design/chapitre4-grey.png\")\r\nchapitre4grey_crop = pygame.transform.scale(chapitre4grey, (180,105))\r\nchapitre4grey_crop_rect = chapitre4grey_crop.get_rect()\r\nchapitre4grey_crop_rect = chapitre4grey_crop_rect.move((240,260))\r\n\r\nchapitre5grey = pygame.image.load(\"design/chapitre5-grey.png\")\r\nchapitre5grey_crop = pygame.transform.scale(chapitre5grey, (180,105))\r\nchapitre5grey_crop_rect = chapitre5grey_crop.get_rect()\r\nchapitre5grey_crop_rect = chapitre5grey_crop_rect.move((240,340))\r\n\r\nvictoire = 0\r\ncpt = 0\r\nprint_title = True #On initialise une booléenne. Lorsqu'elle sera fausse, on cessera d'afficher le titre.\r\nprint_background = True #Même chose pour le fond d'écran.\r\nprint_play_button = True #Même chose pour le bouton play\r\nprint_city_map_crop = False #Mêeme chose pour la map de la ville\r\nprint_shop = False\r\nprint_indoor_shop = False\r\nprint_nuclear_central_shop = False\r\nprint_nuclear_central_logo = False\r\nprint_return_button = False\r\nprint_child = False\r\nmini_game_thief = False\r\nprint_library = False\r\nprint_chapitre1 = False\r\nprint_chapitre2grey = False\r\nprint_chapitre3grey = False\r\nprint_chapitre4grey = False\r\nprint_chapitre5grey = False\r\n\r\n\r\npolice = pygame.font.SysFont(None, 48)\r\n\r\n\r\nrun = True\r\nwhile run: #Tant que le programme est en cours\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT: #Tant que la croix n'a pas été cliqué, le programme continue\r\n                run = False\r\n        #Instructions  qui s'éxecute après avoir touché à bouton\r\n        if event.type == pygame.KEYDOWN: #Si la flèche du bas est saisie\r\n            if event.key == pygame.K_DOWN and image_rect.y < 170:\r\n                image_rect.y += 2 #L'ordonnée de l'image est modifiée, elle ne peut pas sortir de l'image grâce à la condition du dessus.\r\n            if event.key == pygame.K_UP and image_rect.y > -90: #Si la flèche du haut est saisia\r\n                image_rect.y -= 2 #Même chose que plus haut\r\n\r\n        #Instruction d'appuyer sur un boutton\r\n        if event.type == pygame.MOUSEBUTTONDOWN:\r\n\r\n            if play_button_crop_rect.collidepoint(event.pos)and (mini_game_thief==False):#Lorsqu'on appuie sur le bouton entrée\r\n                hub = open_town() #J'associe à une variable, les 5 qui sont retournées par la fonction \"open town()\", qui affiche uniquement les images qui sont nécessaire au menu de la ville : donc les images du shop, du fond d'écran et de l'enfant.\r\n                print_play_button,print_title,print_city_map_crop,print_shop,print_child = hub #Je mets à jours les 5 variables, en leur donnant leur nouvelle valeur \"true\" ou \"false\" qui sont comprise dans \"hub\"\r\n\r\n            if (shop_button_crop_rect.collidepoint(event.pos) and print_city_map_crop ==True) or (shop_image_crop_rect.collidepoint(event.pos) and print_city_map_crop==True) and (mini_game_thief==False): #Lorsqu'on appuie sur le bouton shop\r\n                hub = close_town()\r\n                print_city_map_crop, print_shop, print_child = hub\r\n                shop = open_shop()#J'associe à une variable, les 5 qui sont retournées par la fonction \"open town()\", qui affiche uniquement les images qui sont nécessaire à la boutique\r\n                print_indoor_shop, print_nuclear_central_shop, print_nuclear_central_logo, print_return_button = shop#Je mets à jours les 5 variables, en leur donnant leur nouvelle valeur \"true\" ou \"false\" qui sont comprise dans \"shop\".\r\n\r\n            if return_button_crop_rect.collidepoint(event.pos) and (print_indoor_shop == True) and (mini_game_thief==False): #Si je suis dans le shop et que je clique sur le bouton return alors je reviens à l'affichage de la ville.\r\n                hub = close_shop()\r\n                print_indoor_shop, print_nuclear_central_shop, print_nuclear_central_logo, print_return_button = hub\r\n                hub = open_town()\r\n                print_play_button,print_title,print_city_map_crop,print_shop,print_child = hub\r\n\r\n            if child_crop_rect.collidepoint(event.pos) and (print_city_map_crop == True):\r\n                print_library = True\r\n                print_return_button = True\r\n                print_chapitre1 = True\r\n                print_chapitre2grey = True\r\n                print_chapitre3grey = True\r\n                print_chapitre4grey = True\r\n                print_chapitre5grey = True\r\n\r\n            if chapitre1_crop_rect.collidepoint(event.pos) and (print_library == True):\r\n                print_library = False\r\n                print_chapitre1= False\r\n                mini_game_thief = True\r\n                print_return_button = False\r\n                print_chapitre2grey = False\r\n                print_chapitre3grey = False\r\n                print_chapitre4grey = False\r\n                print_chapitre5grey = False\r\n\r\n            if return_button_crop_rect.collidepoint(event.pos) and (print_library == True) and (mini_game_thief==False): #Si je suis dans la librairie et que je clique sur le bouton return alors je reviens à l'affichage de la ville.\r\n                print_library = False\r\n                print_chapitre1 = False\r\n                print_return_button = False\r\n                print_chapitre2grey = False\r\n                print_chapitre3grey = False\r\n                print_chapitre4grey = False\r\n                print_chapitre5grey = False\r\n\r\n\r\n\r\n\r\n\r\n        #Instructions pour pour l'affichage d'une image\r\n        if print_background == True: #tant qu'on met la variable à Vrai, on affiche le fond d'écran\r\n            if background_index >2: #Une suite d'instructions qui font en sorte que les éléments du décor s'affichent avec une certaine latence.\r\n                background_index = 0\r\n            if background_index <=2:\r\n                screen.blit(background_gif[int(background_index)],(0,0))\r\n                background_index = background_index+0.015 #Plus la valeur additionnée sera basse, plus la transition sera lente.\r\n\r\n        if print_city_map_crop == True:\r\n            screen.blit(city_map_crop,(0,0))\r\n        if print_shop == True:\r\n            screen.blit(shop_image_crop, (460, 230))\r\n            screen.blit(shop_button_crop, (510,410))\r\n        if print_title == True: #Tant qu'on met la variable à Vrai, on affiche le titre\r\n            screen.blit(title,(-20, image_rect.y))\r\n        if print_play_button == True:\r\n            screen.blit(play_button_crop,(230,300))\r\n        if print_indoor_shop == True    :\r\n            screen.blit(wall_indoor_shop_crop,(0,0))\r\n        if print_nuclear_central_shop == True:\r\n            screen.blit(nuclear_central_crop,(0,70))\r\n        if print_nuclear_central_logo == True:\r\n            screen.blit(nuclear_central_button_crop,(65,190))\r\n        if print_child == True:\r\n            screen.blit(child_crop,(20,40))\r\n        if print_library==True:\r\n            screen.blit(library_crop,(0,0))\r\n        if print_chapitre1 == True:\r\n            screen.blit(chapitre1_crop, (240, 20))\r\n        if print_chapitre2grey == True:\r\n            screen.blit(chapitre2grey_crop, (240, 100))\r\n        if print_chapitre3grey == True:\r\n            screen.blit(chapitre3grey_crop, (240, 180))\r\n        if print_chapitre4grey == True:\r\n            screen.blit(chapitre4grey_crop, (240, 260))\r\n        if print_chapitre5grey == True:\r\n            screen.blit(chapitre5grey_crop, (240, 340))\r\n        if print_return_button == True:\r\n            screen.blit(return_button_crop, (20, 350))\r\n        if victoire == 1:\r\n            if print_win_text == True:\r\n                screen.blit(texte_win, (45,180))\r\n                screen.blit(text_discover_map,(85,230))\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if texte_win_rect.collidepoint(event.pos):\r\n                    city_map = pygame.image.load(\"design/city_map_grey1.png\")  # On initialise une variable avec l'image de la ville.\r\n                    city_map_crop = pygame.transform.scale(city_map, crop)\r\n                    print_win_text = False\r\n        pygame.display.update() #Mise à jour\r\n        # continue du programme\r\n        print(mini_game_thief)\r\n        if mini_game_thief == True:\r\n            print_child = False\r\n            print_shop = False\r\n            print_background = False\r\n            print_city_map_crop = False\r\n            screen.fill(blanc)\r\n            # L'animation du bonhomme\r\n            index += 0.00001  # Incrémentez l'index\r\n            index = index + 0.01\r\n            if (index >= 2):\r\n                index = 0\r\n            if before_start == True:\r\n                touch = False\r\n                screen.blit(texte_before_game_1, (100, 90))\r\n                screen.blit(texte_before_game_2, (110, 150))\r\n                screen.blit(texte_before_game_3, (200, 360))\r\n                screen.blit(play_button_crop, (300, 330))\r\n                play_button_crop_rect = play_button_crop.get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\r\n                play_button_crop_rect = play_button_crop_rect.move((300, 330))\r\n                if event.type == pygame.MOUSEBUTTONDOWN:\r\n                    if play_button_crop_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\r\n                        before_start = False\r\n                        start = True\r\n                thief.x, thief.y = 300, 230\r\n                screen.blit(thief_animation(thief_frames, thief, index), (thief.x, thief.y))\r\n\r\n            if start == True:\r\n                # Un choix aléatoire est fait\r\n                choice = random.choice(direction)\r\n\r\n                if (thief.y <= 0) or (thief.y >= 455) or (640 <= thief.x) or (thief.x <= 0):\r\n                    touch = True\r\n                if touch == True:\r\n                    screen.blit(texte_thief_exit, text.position)\r\n                    screen.blit(texte_restart, (215, 300))\r\n                    screen.blit(play_button_crop, (235, 340))\r\n                    play_button_crop_rect = play_button_crop.get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\r\n                    play_button_crop_rect = play_button_crop_rect.move((225, 340))\r\n                    if event.type == pygame.MOUSEBUTTONDOWN and touch == True:\r\n                        if play_button_crop_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\r\n                            before_start = True\r\n                            start = False\r\n                # Lorsque le choix est fait thief.x et thief.y sont modifiés\r\n                change_position(thief)\r\n                # On met la surface du voleur dans une variable rect (obligatoire pour la collision future avec le curseur)\r\n                current_frame_rect = thief_animation(thief_frames, thief,index).get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable\r\n                # On veut que la surface se déplace aux mêmes positions que le voleur\r\n                current_frame_rect = current_frame_rect.move(thief.x, thief.y)\r\n                if event.type == pygame.MOUSEBUTTONDOWN and touch == False:\r\n                    if current_frame_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée\r\n                        before_start = False\r\n                        start = False\r\n                        after_start = True\r\n                # Actualise l'affichage du voleur avec les nouvelles coordonnées et sa bonne frame d'animation\r\n                screen.blit(thief_animation(thief_frames, thief, index), (thief.x, thief.y))\r\n            if after_start == True: #Cette condition provoque l'arrêt de jeu et rammène à l'affichage de la ville. Comme after start reste True pour toujours, alors l'enfant ne pourra plus jamais refaire ce niveau.\r\n                cpt +=1\r\n                mini_game_thief = False\r\n                if cpt == 1:\r\n                    print_win_text = True\r\n                victoire = 1\r\n                hub = open_town()  # J'associe à une variable, les 5 qui sont retournées par la fonction \"open town()\", qui affiche uniquement les images qui sont nécessaire au menu de la ville : donc les images du shop, du fond d'écran et de l'enfant.\r\n                print_play_button, print_title, print_city_map_crop, print_shop, print_child = hub\r\n\r\n\r\n            # Rafraîchir l'affichage\r\n\r\n\r\n# Remplir l'écran avec la couleur blanche\r\n\r\n# Boucle principale du jeu\r\n\r\n\r\n\r\npygame.quit()\r\nquit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision c6dff32a1c82185126f3909cec9d703907152cbf)
+++ b/main.py	(date 1716814413543)
@@ -32,7 +32,7 @@
         self.speed = 2
         self.life = 3
         self.y = 270
-        self.x = 220
+        self.x = 300
         self.taille = (25,25)
         self.position = (self.x, self.y)
 #Permet d'utiliser les classes et ses composantes du mini jeu de Tom mini_game_thief
@@ -49,7 +49,6 @@
 direction = ["up", "down", "left", "right"]
 #Une police d'écriture de direction qui sert au texte du jeu de Tom, mini_game_thief
 font = pygame.font.Font(None, 36)  # Utilise la police par défaut avec une taille de 36 points
-font2 = pygame.font.Font(None, 66)
 #Plusieurs fonctions qui servent au jeu de Tom, mini_game_thief
 def thief_animation(thief_frames, thief , index):
     current_frame = pygame.transform.scale(thief_frames[int(index)], thief.taille)
@@ -61,13 +60,13 @@
 #Faire une foncton qui fait avancer le bonhomme dans une direction aléatoire
 def change_position(thief):
     if choice == "up" and 0<thief.y<455 and 0<thief.x<640:
-        thief.y += 1
+        thief.y += 6
     elif choice == "down" and 0<thief.y<455 and 0<thief.x<640:
-        thief.y -= 1
+        thief.y -= 6
     elif choice == "left" and 0<thief.x<640 and 0<thief.y<455:
-        thief.x -= 1
+        thief.x -= 6
     elif choice == "right" and 0<thief.x<640 and 0<thief.y<455:
-        thief.x += 1
+        thief.x += 6
     print(choice)
 
 play_button = pygame.image.load("design/play_button.png") #On initialise une variable avec l'image du bouton.
@@ -78,10 +77,7 @@
 texte_before_game_2 = font.render("Clique dessus avant qu'il ne s'enfuit.", True, noir)
 texte_before_game_3 = font.render("Prêt ?", True, noir)
 texte_restart = font.render("On recommence ?", True, noir)
-texte_win = font2.render("Bravo ! Tu l'as attrapé !", True, blanc)
-texte_win_rect = texte_win.get_rect()
-texte_win_rect = texte_win_rect.move((85,230))
-text_discover_map = font.render("Clique sur la carte pour l'actualiser.", True, blanc)
+texte_win = font.render("Bravo ! Tu l'as attrapé !", True, noir)
 texte_thief_exit = font.render("Il s'est echappé !", True, noir)
 # Faire apparaître du texte
 touch = False
@@ -107,7 +103,7 @@
 for i in range(2):
     background_gif[i]= pygame.transform.scale(background_gif[i], crop)
 
-city_map = pygame.image.load("design/city_map_grey.png") #On initialise une variable avec l'image de la ville.
+city_map = pygame.image.load("design/city_map.png") #On initialise une variable avec l'image de la ville.
 city_map_crop = pygame.transform.scale(city_map, crop) #On rogne cette image dde la ville aux dimensions 640, 455
 
 play_button = pygame.image.load("design/play_button.png") #On initialise une variable avec l'image du bouton.
@@ -136,7 +132,7 @@
 
 return_button = pygame.image.load("design/return_button.png")
 return_button_crop = pygame.transform.scale(return_button, (80, 80))
-return_button_crop_rect = return_button_crop.get_rect()
+return_button_crop_rect = shop_button_crop.get_rect()
 return_button_crop_rect = return_button_crop_rect.move((20,370))
 
 child = pygame.image.load("design/child.png")
@@ -144,38 +140,6 @@
 child_crop_rect = child_crop.get_rect()
 child_crop_rect = child_crop_rect.move((20,40))
 
-library = pygame.image.load("design/library.jpg")
-library_crop = pygame.transform.scale(library, (670,455))
-library_crop_rect = library_crop.get_rect()
-library_crop_rect = library_crop_rect.move((0,0))
-
-chapitre1 = pygame.image.load("design/chapitre1.png")
-chapitre1_crop = pygame.transform.scale(chapitre1, (180,105))
-chapitre1_crop_rect = chapitre1_crop.get_rect()
-chapitre1_crop_rect = chapitre1_crop_rect.move((240, 20))
-
-chapitre2grey = pygame.image.load("design/chapitre2-grey.png")
-chapitre2grey_crop = pygame.transform.scale(chapitre2grey, (180,105))
-chapitre2grey_crop_rect = chapitre2grey_crop.get_rect()
-chapitre2grey_crop_rect = chapitre2grey_crop_rect.move((240,100))
-
-chapitre3grey = pygame.image.load("design/chapitre3-grey.png")
-chapitre3grey_crop = pygame.transform.scale(chapitre3grey, (180,105))
-chapitre3grey_crop_rect = chapitre3grey_crop.get_rect()
-chapitre3grey_crop_rect = chapitre3grey_crop_rect.move((240, 180))
-
-chapitre4grey = pygame.image.load("design/chapitre4-grey.png")
-chapitre4grey_crop = pygame.transform.scale(chapitre4grey, (180,105))
-chapitre4grey_crop_rect = chapitre4grey_crop.get_rect()
-chapitre4grey_crop_rect = chapitre4grey_crop_rect.move((240,260))
-
-chapitre5grey = pygame.image.load("design/chapitre5-grey.png")
-chapitre5grey_crop = pygame.transform.scale(chapitre5grey, (180,105))
-chapitre5grey_crop_rect = chapitre5grey_crop.get_rect()
-chapitre5grey_crop_rect = chapitre5grey_crop_rect.move((240,340))
-
-victoire = 0
-cpt = 0
 print_title = True #On initialise une booléenne. Lorsqu'elle sera fausse, on cessera d'afficher le titre.
 print_background = True #Même chose pour le fond d'écran.
 print_play_button = True #Même chose pour le bouton play
@@ -187,16 +151,9 @@
 print_return_button = False
 print_child = False
 mini_game_thief = False
-print_library = False
-print_chapitre1 = False
-print_chapitre2grey = False
-print_chapitre3grey = False
-print_chapitre4grey = False
-print_chapitre5grey = False
-
 
 police = pygame.font.SysFont(None, 48)
-
+texte = "Bonjour, Pygame!"
 
 run = True
 while run: #Tant que le programme est en cours
@@ -230,35 +187,7 @@
                 print_play_button,print_title,print_city_map_crop,print_shop,print_child = hub
 
             if child_crop_rect.collidepoint(event.pos) and (print_city_map_crop == True):
-                print_library = True
-                print_return_button = True
-                print_chapitre1 = True
-                print_chapitre2grey = True
-                print_chapitre3grey = True
-                print_chapitre4grey = True
-                print_chapitre5grey = True
-
-            if chapitre1_crop_rect.collidepoint(event.pos) and (print_library == True):
-                print_library = False
-                print_chapitre1= False
                 mini_game_thief = True
-                print_return_button = False
-                print_chapitre2grey = False
-                print_chapitre3grey = False
-                print_chapitre4grey = False
-                print_chapitre5grey = False
-
-            if return_button_crop_rect.collidepoint(event.pos) and (print_library == True) and (mini_game_thief==False): #Si je suis dans la librairie et que je clique sur le bouton return alors je reviens à l'affichage de la ville.
-                print_library = False
-                print_chapitre1 = False
-                print_return_button = False
-                print_chapitre2grey = False
-                print_chapitre3grey = False
-                print_chapitre4grey = False
-                print_chapitre5grey = False
-
-
-
 
 
         #Instructions pour pour l'affichage d'une image
@@ -284,34 +213,12 @@
             screen.blit(nuclear_central_crop,(0,70))
         if print_nuclear_central_logo == True:
             screen.blit(nuclear_central_button_crop,(65,190))
-        if print_child == True:
-            screen.blit(child_crop,(20,40))
-        if print_library==True:
-            screen.blit(library_crop,(0,0))
-        if print_chapitre1 == True:
-            screen.blit(chapitre1_crop, (240, 20))
-        if print_chapitre2grey == True:
-            screen.blit(chapitre2grey_crop, (240, 100))
-        if print_chapitre3grey == True:
-            screen.blit(chapitre3grey_crop, (240, 180))
-        if print_chapitre4grey == True:
-            screen.blit(chapitre4grey_crop, (240, 260))
-        if print_chapitre5grey == True:
-            screen.blit(chapitre5grey_crop, (240, 340))
         if print_return_button == True:
-            screen.blit(return_button_crop, (20, 350))
-        if victoire == 1:
-            if print_win_text == True:
-                screen.blit(texte_win, (45,180))
-                screen.blit(text_discover_map,(85,230))
-            if event.type == pygame.MOUSEBUTTONDOWN:
-                if texte_win_rect.collidepoint(event.pos):
-                    city_map = pygame.image.load("design/city_map_grey1.png")  # On initialise une variable avec l'image de la ville.
-                    city_map_crop = pygame.transform.scale(city_map, crop)
-                    print_win_text = False
-        pygame.display.update() #Mise à jour
-        # continue du programme
-        print(mini_game_thief)
+            screen.blit(return_button_crop,(20,350))
+        if print_child == True:
+            screen.blit(child_crop,(20,40))
+        pygame.display.update() #Mise à jour continue du programme
+
         if mini_game_thief == True:
             print_child = False
             print_shop = False
@@ -346,18 +253,20 @@
                     touch = True
                 if touch == True:
                     screen.blit(texte_thief_exit, text.position)
-                    screen.blit(texte_restart, (215, 300))
-                    screen.blit(play_button_crop, (235, 340))
+                    screen.blit(texte_restart, (295, 300))
+                    screen.blit(play_button_crop, (325, 340))
                     play_button_crop_rect = play_button_crop.get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable
-                    play_button_crop_rect = play_button_crop_rect.move((225, 340))
+                    play_button_crop_rect = play_button_crop_rect.move((325, 340))
                     if event.type == pygame.MOUSEBUTTONDOWN and touch == True:
                         if play_button_crop_rect.collidepoint(event.pos):  # Lorsqu'on appuie sur le bouton entrée
                             before_start = True
                             start = False
                 # Lorsque le choix est fait thief.x et thief.y sont modifiés
                 change_position(thief)
+                print(thief.x, thief.y)
                 # On met la surface du voleur dans une variable rect (obligatoire pour la collision future avec le curseur)
-                current_frame_rect = thief_animation(thief_frames, thief,index).get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable
+                current_frame_rect = thief_animation(thief_frames, thief,
+                                                     index).get_rect()  # On met la taille de la surface de ce bouton rogné, dans une variable
                 # On veut que la surface se déplace aux mêmes positions que le voleur
                 current_frame_rect = current_frame_rect.move(thief.x, thief.y)
                 if event.type == pygame.MOUSEBUTTONDOWN and touch == False:
@@ -367,18 +276,10 @@
                         after_start = True
                 # Actualise l'affichage du voleur avec les nouvelles coordonnées et sa bonne frame d'animation
                 screen.blit(thief_animation(thief_frames, thief, index), (thief.x, thief.y))
-            if after_start == True: #Cette condition provoque l'arrêt de jeu et rammène à l'affichage de la ville. Comme after start reste True pour toujours, alors l'enfant ne pourra plus jamais refaire ce niveau.
-                cpt +=1
-                mini_game_thief = False
-                if cpt == 1:
-                    print_win_text = True
-                victoire = 1
-                hub = open_town()  # J'associe à une variable, les 5 qui sont retournées par la fonction "open town()", qui affiche uniquement les images qui sont nécessaire au menu de la ville : donc les images du shop, du fond d'écran et de l'enfant.
-                print_play_button, print_title, print_city_map_crop, print_shop, print_child = hub
-
-
+            if after_start == True:
+                screen.blit(texte_win, (260, 300))
             # Rafraîchir l'affichage
-
+            pygame.display.flip()
 
 # Remplir l'écran avec la couleur blanche
 
@@ -388,3 +289,4 @@
 
 pygame.quit()
 quit()
+
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.11 (Central_project)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11 (Central_project)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c6dff32a1c82185126f3909cec9d703907152cbf)
+++ b/.idea/misc.xml	(date 1716814413608)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.11 (Central_project)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (Central_project)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (Central_project)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/Central_project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Central_project.iml b/.idea/Central_project.iml
--- a/.idea/Central_project.iml	(revision c6dff32a1c82185126f3909cec9d703907152cbf)
+++ b/.idea/Central_project.iml	(date 1716814413624)
@@ -3,8 +3,9 @@
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.venv" />
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.12 (Central_project)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"edce05e2-d3c4-49e5-89e0-cf79955592d7\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/design/city_map.png-autosave.kra\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/design/city_map_grey.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/design/city_map_grey1.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/design/city_map_grey2.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/design/city_map_grey4.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/design/city_map_grey5.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/design/city_map_grey_3.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/function.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/function.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"library\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2cRW3Q0NGM70iKhtSg1yjXsGMgG\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"Python.Main.executor\": \"Run\",\r\n    \"Python.function.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"visuel\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"edce05e2-d3c4-49e5-89e0-cf79955592d7\" name=\"Changes\" comment=\"\" />\r\n      <created>1708074672025</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1708074672025</updated>\r\n      <workItem from=\"1708074678526\" duration=\"3718000\" />\r\n      <workItem from=\"1708087823300\" duration=\"13525000\" />\r\n      <workItem from=\"1708285219633\" duration=\"632000\" />\r\n      <workItem from=\"1708328874394\" duration=\"6232000\" />\r\n      <workItem from=\"1708450964155\" duration=\"3496000\" />\r\n      <workItem from=\"1708939643458\" duration=\"2073000\" />\r\n      <workItem from=\"1709038054131\" duration=\"81000\" />\r\n      <workItem from=\"1709131260502\" duration=\"2405000\" />\r\n      <workItem from=\"1709298049034\" duration=\"8758000\" />\r\n      <workItem from=\"1709901486335\" duration=\"25000\" />\r\n      <workItem from=\"1709909622873\" duration=\"456000\" />\r\n      <workItem from=\"1710336976803\" duration=\"725000\" />\r\n      <workItem from=\"1710486721986\" duration=\"316000\" />\r\n      <workItem from=\"1710487723623\" duration=\"79000\" />\r\n      <workItem from=\"1710487931556\" duration=\"35000\" />\r\n      <workItem from=\"1710488331080\" duration=\"34000\" />\r\n      <workItem from=\"1710488443436\" duration=\"8000\" />\r\n      <workItem from=\"1710488550548\" duration=\"22000\" />\r\n      <workItem from=\"1712225523219\" duration=\"797000\" />\r\n      <workItem from=\"1715095744851\" duration=\"1399000\" />\r\n      <workItem from=\"1715428432893\" duration=\"17000\" />\r\n      <workItem from=\"1715429718338\" duration=\"1041000\" />\r\n      <workItem from=\"1715432396416\" duration=\"19000\" />\r\n      <workItem from=\"1715432433284\" duration=\"2298000\" />\r\n      <workItem from=\"1715438010247\" duration=\"90000\" />\r\n      <workItem from=\"1716358489558\" duration=\"7377000\" />\r\n      <workItem from=\"1716382228473\" duration=\"173000\" />\r\n      <workItem from=\"1716576626395\" duration=\"3033000\" />\r\n      <workItem from=\"1716753887595\" duration=\"5572000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Central_project$function.coverage\" NAME=\"function Coverage Results\" MODIFIED=\"1709309072408\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Central_project$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1716759489635\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Central_project$Main.coverage\" NAME=\"Main Coverage Results\" MODIFIED=\"1708074758671\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c6dff32a1c82185126f3909cec9d703907152cbf)
+++ b/.idea/workspace.xml	(date 1716817201613)
@@ -5,15 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="edce05e2-d3c4-49e5-89e0-cf79955592d7" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/design/city_map.png-autosave.kra" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/design/city_map_grey.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/design/city_map_grey1.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/design/city_map_grey2.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/design/city_map_grey4.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/design/city_map_grey5.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/design/city_map_grey_3.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/Central_project.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/Central_project.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_05_2024_10_11__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_22_05_2024_08_32__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_22_05_2024_08_32__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/function.py" beforeDir="false" afterPath="$PROJECT_DIR$/function.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/jeux1bis.py" beforeDir="false" afterPath="$PROJECT_DIR$/jeux1bis.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -29,49 +26,70 @@
     </option>
   </component>
   <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="library" />
-      </map>
-    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="MarkdownSettingsMigration">
-    <option name="stateVersion" value="1" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 7
 }</component>
   <component name="ProjectId" id="2cRW3Q0NGM70iKhtSg1yjXsGMgG" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
-    <ConfirmationsSetting value="2" id="Add" />
-  </component>
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "Python.Main.executor": "Run",
-    "Python.function.executor": "Run",
-    "Python.main.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "visuel",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "preferences.pluginManager",
-    "vue.rearranger.settings.migration": "true"
-  }
-}]]></component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.Main.executor&quot;: &quot;Run&quot;,
+    &quot;Python.c.executor&quot;: &quot;Run&quot;,
+    &quot;Python.function.executor&quot;: &quot;Run&quot;,
+    &quot;Python.jeux1bis.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;Python.trad.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  }
+}</component>
+  <component name="RunManager">
+    <configuration name="jeux1bis" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="Central_project" />
+      <option name="ENV_FILES" value="" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/jeux1bis.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.jeux1bis" />
+      </list>
+    </recent_temporary>
+  </component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95" />
+        <option value="bundled-python-sdk-09665e90c3a7-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.15026.15" />
       </set>
     </attachedChunks>
   </component>
@@ -106,24 +124,15 @@
       <workItem from="1715428432893" duration="17000" />
       <workItem from="1715429718338" duration="1041000" />
       <workItem from="1715432396416" duration="19000" />
-      <workItem from="1715432433284" duration="2298000" />
-      <workItem from="1715438010247" duration="90000" />
-      <workItem from="1716358489558" duration="7377000" />
-      <workItem from="1716382228473" duration="173000" />
-      <workItem from="1716576626395" duration="3033000" />
-      <workItem from="1716753887595" duration="5572000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
-  <component name="VcsManagerConfiguration">
-    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
-  </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/Central_project$function.coverage" NAME="function Coverage Results" MODIFIED="1709309072408" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Central_project$main.coverage" NAME="main Coverage Results" MODIFIED="1716759489635" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Central_project$main.coverage" NAME="main Coverage Results" MODIFIED="1715432397476" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Central_project$Main.coverage" NAME="Main Coverage Results" MODIFIED="1708074758671" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: jeux1bis.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport random\r\nimport sys\r\n\r\nglobal resultat\r\npygame.init()\r\ncompteur = 60000\r\n\r\n# Définition de la taille de la fenêtre\r\nWINDOW_WIDTH = 800\r\nWINDOW_HEIGHT = 600\r\nWINDOW_SIZE = (WINDOW_WIDTH, WINDOW_HEIGHT)\r\nWINDOW_TITLE = \"AIMLABCHARBON\"\r\nBACKGROUND_COLOR = (255, 255, 255)  # Blanc\r\n\r\n# Chargement de l'image de fond\r\nbackground = pygame.image.load(\"design/plant.png\")\r\nbackground = pygame.transform.scale(background, (WINDOW_WIDTH, WINDOW_HEIGHT))\r\nvillepropre = pygame.image.load(\"design/villepropre.png\")\r\nvillepropre = pygame.transform.scale(villepropre, (WINDOW_WIDTH, WINDOW_HEIGHT))\r\nvillecharbon = pygame.image.load(\"design/villecharbon.png\")\r\nvillecharbon = pygame.transform.scale(villecharbon, (WINDOW_WIDTH, WINDOW_HEIGHT))\r\n\r\n# Définition des paramètres des carrés\r\nS   QUARE_SIZE = 50\r\n\r\n# Position du score\r\nSCORE_POSITION = (WINDOW_WIDTH - 150, 20)\r\ntemps_POSITION = (WINDOW_WIDTH - 150, 80)\r\nSCORE_FONT = pygame.font.Font(None, 36)\r\n\r\n# Durée de vie des carrés (en millisecondes)\r\nSQUARE_DURATION = 5000  # 5 secondes\r\n\r\n# Temps entre chaque apparition de carré (en millisecondes)\r\nSQUARE_APPEAR_INTERVAL = 1000  # 1 seconde\r\n\r\n# Chargement de l'image de \"coal\"\r\ncoal = pygame.image.load(\"design/coal.png\")\r\ncoal = pygame.transform.scale(coal, (SQUARE_SIZE, SQUARE_SIZE))\r\n\r\n# Création de la fenêtre\r\nwindow = pygame.display.set_mode(WINDOW_SIZE)\r\npygame.display.set_caption(WINDOW_TITLE)\r\n\r\nclock = pygame.time.Clock()\r\n\r\n# Liste des carrés actuellement affichés à l'écran\r\nsquares = []\r\n\r\n# Score initial\r\nscore = 0\r\n\r\n\r\n# Fonction pour générer un carré à une position aléatoire\r\ndef generate_square():\r\n    x = random.randint(0, WINDOW_WIDTH - SQUARE_SIZE)\r\n    y = random.randint(0, WINDOW_HEIGHT - SQUARE_SIZE)\r\n    creation_time = pygame.time.get_ticks()  # Enregistrer le moment de la création\r\n    return (x, y, creation_time)\r\n\r\n\r\n# Fonction pour afficher une image pendant un certain temps\r\ndef display_image_for_duration(image, duration):\r\n    window.blit(image, (0, 0))\r\n    pygame.display.flip()\r\n    pygame.time.wait(duration)\r\n    return True\r\n\r\n\r\nrunning = True\r\nwhile running:\r\n    # Affichage du titre\r\n    title = pygame.image.load(\"design/coal.png\")\r\n    window.blit(title, (0, 0))\r\n    pygame.display.set_icon(title)\r\n\r\n    # Affichage de l'image de fond\r\n    window.blit(background, (0, 0))\r\n\r\n    current_time = pygame.time.get_ticks()\r\n\r\n    # Génération d'un nouveau carré à chaque intervalle\r\n    # Génération d'un nouveau carré si le temps écoulé depuis la création du dernier carré dépasse l'intervalle\r\n    if not squares or current_time - squares[-1][2] > SQUARE_APPEAR_INTERVAL:\r\n        new_square = generate_square()\r\n        squares.append(new_square)\r\n\r\n    # Affichage et gestion des carrés\r\n    for square in squares[:]:  # Utilisation de la copie de la liste pour itérer\r\n        window.blit(coal, (square[0], square[1]))\r\n        if current_time - square[2] >= SQUARE_DURATION:\r\n            squares.remove(square)  # Retirer le carré si sa durée est écoulée\r\n\r\n    # Affichage du score\r\n    score_text = SCORE_FONT.render(f\"Score: {score}\", True, (0, 0, 0))\r\n    window.blit(score_text, SCORE_POSITION)\r\n\r\n    # Affichage du compteur de temps\r\n    temps_text = SCORE_FONT.render(f\"Temps: {max(compteur // 1000, 0)}\", True, (0, 0, 0))\r\n    window.blit(temps_text, temps_POSITION)\r\n\r\n    # Gestion des événements\r\n    for event in pygame.event.get():\r\n        if event.type == pygame.QUIT:\r\n            running = False\r\n        elif event.type == pygame.MOUSEBUTTONDOWN:\r\n            for square in squares[:]:  # Utilisation de la copie de la liste pour itérer\r\n                square_rect = pygame.Rect(square[0], square[1], SQUARE_SIZE, SQUARE_SIZE)\r\n                if square_rect.collidepoint(event.pos):\r\n                    squares.remove(square)\r\n                    score += 1\r\n\r\n    #appeler la fonction display_image_for_duration\r\n    if score == 30:\r\n        display_image_for_duration(villepropre, 10000)\r\n        resultat = True\r\n        pygame.quit()\r\n        sys.exit()\r\n\r\n    elif compteur <= 0:\r\n        display_image_for_duration(villecharbon, 10000)\r\n        pygame.quit()\r\n        sys.exit()\r\n        running = False  # Sortie de la boucle principale lorsque le compteur atteint 0\r\n\r\n    # Décrémentation du compteur de temps\r\n    compteur -= 30  # Décrémenter de 30 millisecondes (équivalent à 30 FPS)\r\n\r\n    # Mise à jour de l'affichage\r\n    pygame.display.flip()\r\n    clock.tick(30)\r\n\r\npygame.quit()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jeux1bis.py b/jeux1bis.py
--- a/jeux1bis.py	(revision c6dff32a1c82185126f3909cec9d703907152cbf)
+++ b/jeux1bis.py	(date 1716814894349)
@@ -22,7 +22,7 @@
 villecharbon = pygame.transform.scale(villecharbon, (WINDOW_WIDTH, WINDOW_HEIGHT))
 
 # Définition des paramètres des carrés
-S   QUARE_SIZE = 50
+QUARE_SIZE = 50
 
 # Position du score
 SCORE_POSITION = (WINDOW_WIDTH - 150, 20)
